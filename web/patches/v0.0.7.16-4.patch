diff -urN xpra-upstream/parti/__init__.py xpra-0.0.7.16-4/parti/__init__.py
--- xpra-upstream/parti/__init__.py	2010-10-04 02:06:27.102618269 +0700
+++ xpra-0.0.7.16-4/parti/__init__.py	2010-10-04 02:04:51.000000000 +0700
@@ -6,6 +6,6 @@
 import pygtk
 pygtk.require('2.0')
 
-__version__ = "0.0.6"
+__version__ = "0.0.7.16"
 import wimpiggy
 assert wimpiggy.__version__ == __version__
diff -urN xpra-upstream/parti/scripts/main.py xpra-0.0.7.16-4/parti/scripts/main.py
--- xpra-upstream/parti/scripts/main.py	2010-10-04 02:06:27.106618177 +0700
+++ xpra-0.0.7.16-4/parti/scripts/main.py	2010-10-04 02:04:50.000000000 +0700
@@ -17,7 +17,7 @@
     parser.add_option("-t", "--tray",
                       dest="tray", default="CompositeTest",
                       help="Set default tray type")
-    (options, args) = parser.parse_args(cmdline[1:])
+    (options, _) = parser.parse_args(cmdline[1:])
 
     # This means, if an exception propagates to the gtk mainloop, then pass it
     # on outwards.  Or at least it did at one time; dunno if it actually does
diff -urN xpra-upstream/parti/scripts/repl.py xpra-0.0.7.16-4/parti/scripts/repl.py
--- xpra-upstream/parti/scripts/repl.py	2010-10-04 02:06:27.106618177 +0700
+++ xpra-0.0.7.16-4/parti/scripts/repl.py	2010-10-04 02:04:50.000000000 +0700
@@ -12,7 +12,7 @@
 
 def main(cmdline):
     parser = PartiOptionParser()
-    (options, args) = parser.parse_args(cmdline[1:])
+    parser.parse_args(cmdline[1:])
 
     # This means, if an exception propagates to the gtk mainloop, then pass it
     # on outwards.  Or at least it did at one time; dunno if it actually does
diff -urN xpra-upstream/setup.py xpra-0.0.7.16-4/setup.py
--- xpra-upstream/setup.py	2010-10-04 02:06:27.114618196 +0700
+++ xpra-0.0.7.16-4/setup.py	2010-12-05 03:43:13.333928001 +0700
@@ -96,7 +96,7 @@
     packages=["wimpiggy", "wimpiggy.lowlevel",
               "parti", "parti.trays", "parti.addons", "parti.scripts",
               "xpra", "xpra.scripts", "xpra.platform",
-              "xpra.xposix", "xpra.win32",
+              "xpra.xposix", "xpra.win32", "xpra.darwin",
               ],
     scripts=["scripts/parti", "scripts/parti-repl",
              "scripts/xpra",
diff -urN xpra-upstream/setup-win-py2exe.py xpra-0.0.7.16-4/setup-win-py2exe.py
--- xpra-upstream/setup-win-py2exe.py	1970-01-01 07:00:00.000000000 +0700
+++ xpra-0.0.7.16-4/setup-win-py2exe.py	2010-10-04 02:04:49.000000000 +0700
@@ -0,0 +1,37 @@
+from distutils.core import setup
+import py2exe
+
+setup(
+    name = 'xpra',
+    description = 'screen for X',
+    version = '0.0.7.9',
+
+    windows = [
+                  {
+                      'script': 'xpra/scripts/client_launcher.py',
+                      'icon_resources': [(1, "xpra.ico")],
+                  },
+                  {
+                      'script': 'xpra/scripts/main.py',
+                      'icon_resources': [(1, "xpra.ico")],
+                  }
+              ],
+
+#    console = [
+#                  {
+#                      'script': 'xpra/scripts/main.py',
+#                      'icon_resources': [(1, "xpra.ico")],
+#                  }
+#              ],
+
+    options = {
+                  'py2exe': {
+                      'packages':'encodings',
+                      'includes': 'cairo, pango, pangocairo, atk, gobject',
+                  }
+              },
+
+    data_files=[
+                   'COPYING'
+               ]
+)
diff -urN xpra-upstream/wimpiggy/composite.py xpra-0.0.7.16-4/wimpiggy/composite.py
--- xpra-upstream/wimpiggy/composite.py	2010-10-04 02:06:27.115618150 +0700
+++ xpra-0.0.7.16-4/wimpiggy/composite.py	2010-10-04 02:04:52.000000000 +0700
@@ -5,7 +5,7 @@
 
 import gobject
 from wimpiggy.util import one_arg_signal, AutoPropGObjectMixin
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.lowlevel import (xcomposite_redirect_window,
                                xcomposite_unredirect_window,
                                xcomposite_name_window_pixmap,
diff -urN xpra-upstream/wimpiggy/__init__.py xpra-0.0.7.16-4/wimpiggy/__init__.py
--- xpra-upstream/wimpiggy/__init__.py	2010-10-04 02:06:27.115618150 +0700
+++ xpra-0.0.7.16-4/wimpiggy/__init__.py	2010-10-04 02:04:52.000000000 +0700
@@ -6,4 +6,4 @@
 import pygtk
 pygtk.require('2.0')
 
-__version__ = "0.0.6"
+__version__ = "0.0.7.16"
diff -urN xpra-upstream/wimpiggy/keys.py xpra-0.0.7.16-4/wimpiggy/keys.py
--- xpra-upstream/wimpiggy/keys.py	2010-10-04 02:06:27.116618168 +0700
+++ xpra-0.0.7.16-4/wimpiggy/keys.py	2010-10-04 02:04:52.000000000 +0700
@@ -6,7 +6,7 @@
 import gobject
 import gtk
 from wimpiggy.util import one_arg_signal
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.lowlevel import (get_display_for,
                                get_modifier_map, grab_key, ungrab_all_keys,
                                add_event_receiver, remove_event_receiver)
diff -urN xpra-upstream/wimpiggy/lowlevel/bindings.pyx xpra-0.0.7.16-4/wimpiggy/lowlevel/bindings.pyx
--- xpra-upstream/wimpiggy/lowlevel/bindings.pyx	2010-10-04 02:06:27.118618172 +0700
+++ xpra-0.0.7.16-4/wimpiggy/lowlevel/bindings.pyx	2010-10-08 02:36:06.539612502 +0700
@@ -130,6 +130,7 @@
 ######
 
 include "constants.pxi"
+ctypedef unsigned long CARD32
 
 cdef extern from *:
     ctypedef struct Display:
@@ -138,7 +139,6 @@
     # appropriate pyrex declarations, without having to untangle the typedefs
     # over and over again, here are some convenience typedefs.  (Yes, CARD32
     # really is 64 bits on 64-bit systems.  Why?  I have no idea.)
-    ctypedef unsigned long CARD32
     ctypedef CARD32 XID
 
     ctypedef int Bool
diff -urN xpra-upstream/wimpiggy/lowlevel/__init__.py xpra-0.0.7.16-4/wimpiggy/lowlevel/__init__.py
--- xpra-upstream/wimpiggy/lowlevel/__init__.py	2010-10-04 02:06:27.117618160 +0700
+++ xpra-0.0.7.16-4/wimpiggy/lowlevel/__init__.py	2010-10-07 23:39:58.000000000 +0700
@@ -3,6 +3,7 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
+#We must import "*" or things will fail in mysterious ways!
 from wimpiggy.lowlevel.bindings import *
 
 from wimpiggy.log import Logger
diff -urN xpra-upstream/wimpiggy/prop.py xpra-0.0.7.16-4/wimpiggy/prop.py
--- xpra-upstream/wimpiggy/prop.py	2010-10-04 02:06:27.120618245 +0700
+++ xpra-0.0.7.16-4/wimpiggy/prop.py	2010-10-04 02:04:52.000000000 +0700
@@ -15,8 +15,8 @@
 from wimpiggy.lowlevel import \
      XGetWindowProperty, XChangeProperty, PropertyError, \
      get_xatom, get_pyatom, get_xwindow, get_pywindow, const, \
-     get_display_for, premultiply_argb_in_place
-from wimpiggy.error import *
+     premultiply_argb_in_place
+from wimpiggy.error import trap, XError
 from wimpiggy.log import Logger
 log = Logger()
 
diff -urN xpra-upstream/wimpiggy/selection.py xpra-0.0.7.16-4/wimpiggy/selection.py
--- xpra-upstream/wimpiggy/selection.py	2010-10-04 02:06:27.121618206 +0700
+++ xpra-0.0.7.16-4/wimpiggy/selection.py	2010-10-04 02:04:52.000000000 +0700
@@ -16,7 +16,7 @@
 from wimpiggy.lowlevel import (get_xatom, get_pywindow, sendClientMessage,
                                myGetSelectionOwner, const,
                                add_event_receiver, remove_event_receiver)
-from wimpiggy.error import *
+from wimpiggy.error import trap
 
 from wimpiggy.log import Logger
 log = Logger()
diff -urN xpra-upstream/wimpiggy/test_error.py xpra-0.0.7.16-4/wimpiggy/test_error.py
--- xpra-upstream/wimpiggy/test_error.py	2010-10-04 02:06:27.122618255 +0700
+++ xpra-0.0.7.16-4/wimpiggy/test_error.py	2010-10-04 02:04:52.000000000 +0700
@@ -4,7 +4,7 @@
 # later version. See the file COPYING for details.
 
 from wimpiggy.test import *
-from wimpiggy.error import *
+from wimpiggy.error import trap, XError
 # Need a way to generate X errors...
 import wimpiggy.lowlevel
 
diff -urN xpra-upstream/wimpiggy/test_lowlevel.py xpra-0.0.7.16-4/wimpiggy/test_lowlevel.py
--- xpra-upstream/wimpiggy/test_lowlevel.py	2010-10-04 02:06:27.123618201 +0700
+++ xpra-0.0.7.16-4/wimpiggy/test_lowlevel.py	2010-10-04 02:04:52.000000000 +0700
@@ -3,10 +3,11 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
+import os
 from wimpiggy.test import *
 import wimpiggy.lowlevel as l
 import gtk
-from wimpiggy.error import *
+from wimpiggy.error import trap, XError
 
 class TestLowlevel(TestWithSession):
     def root(self, disp=None):
@@ -130,8 +131,7 @@
         w2 = self.window(self.display)
         w3 = self.window(self.display)
         gtk.gdk.flush()
-        
-        import os
+
         def do_child(disp_name, xwindow1, xwindow2, xwindow3):
             print "child: in do_child"
             d2 = gtk.gdk.Display(disp_name)
diff -urN xpra-upstream/wimpiggy/test.py xpra-0.0.7.16-4/wimpiggy/test.py
--- xpra-upstream/wimpiggy/test.py	2010-10-04 02:06:27.121618206 +0700
+++ xpra-0.0.7.16-4/wimpiggy/test.py	2010-10-04 02:04:52.000000000 +0700
@@ -7,7 +7,6 @@
 import sys
 import os
 import traceback
-import os
 import atexit
 import errno
 import gobject
@@ -25,7 +24,7 @@
     except exc_class:
         pass
     except:
-        (cls, e, tb) = sys.exc_info()
+        (cls, e, _) = sys.exc_info()
         raise AssertionError, (("unexpected exception: %s: %s\n"
                                + "Original traceback:\n%s")
                                % (cls, e, traceback.format_exc()))
diff -urN xpra-upstream/wimpiggy/window.py xpra-0.0.7.16-4/wimpiggy/window.py
--- xpra-upstream/wimpiggy/window.py	2010-10-04 02:06:27.127618209 +0700
+++ xpra-0.0.7.16-4/wimpiggy/window.py	2010-10-04 02:04:52.000000000 +0700
@@ -26,7 +26,7 @@
 from wimpiggy.util import (AutoPropGObjectMixin,
                            one_arg_signal,
                            non_none_list_accumulator)
-from wimpiggy.error import *
+from wimpiggy.error import trap, XError
 from wimpiggy.prop import prop_get, prop_set
 from wimpiggy.composite import CompositeHelper
 
diff -urN xpra-upstream/wimpiggy/wm.py xpra-0.0.7.16-4/wimpiggy/wm.py
--- xpra-upstream/wimpiggy/wm.py	2010-10-04 02:06:27.128618147 +0700
+++ xpra-0.0.7.16-4/wimpiggy/wm.py	2010-10-04 02:04:52.000000000 +0700
@@ -14,7 +14,7 @@
 else:
     ImmutableSet = frozenset
 
-from wimpiggy.error import *
+from wimpiggy.error import trap
 import wimpiggy.selection
 from wimpiggy.world_window import WorldWindow
 import wimpiggy.lowlevel
diff -urN xpra-upstream/wimpiggy/world_window.py xpra-0.0.7.16-4/wimpiggy/world_window.py
--- xpra-upstream/wimpiggy/world_window.py	2010-10-04 02:06:27.129618129 +0700
+++ xpra-0.0.7.16-4/wimpiggy/world_window.py	2010-10-04 02:04:52.000000000 +0700
@@ -8,7 +8,7 @@
 import wimpiggy.lowlevel
 import wimpiggy.window
 import wimpiggy.prop
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.log import Logger
 log = Logger()
 
diff -urN xpra-upstream/xpra/client.py xpra-0.0.7.16-4/xpra/client.py
--- xpra-upstream/xpra/client.py	2010-10-04 02:06:27.143618171 +0700
+++ xpra-0.0.7.16-4/xpra/client.py	2010-10-15 02:26:11.960497306 +0700
@@ -15,8 +15,8 @@
 log = Logger()
 
 from xpra.protocol import Protocol
-from xpra.keys import mask_to_names, grok_modifier_map
-from xpra.platform.gui import ClipboardProtocolHelper, ClientExtras
+from xpra.keys import mask_to_names
+from xpra.platform.gui import ClipboardProtocolHelper, ClientExtras, grok_modifier_map
 
 import xpra
 default_capabilities = {"__prerelease_version": xpra.__version__}
@@ -85,12 +85,14 @@
         self._metadata.update(metadata)
         
         title_main = self._metadata.get("title", "<untitled window>").decode("utf-8")
-        if "client-machine" in self._metadata:
+        if self._client.title_suffix:
+            title_addendum = self._client.title_suffix
+        elif "client-machine" in self._metadata:
             title_addendum = ("on %s, "
                               % (self._metadata["client-machine"].decode("utf-8"),))
         else:
-            title_addendum = ""
-        self.set_title(u"%s (%svia xpra)" % (title_main, title_addendum))
+            title_addendum = "(via xpra)"
+        self.set_title(u"%s %s" % (title_main, title_addendum))
 
         if "size-constraints" in self._metadata:
             size_metadata = self._metadata["size-constraints"]
@@ -153,13 +155,19 @@
         cr.set_source_rgb(1, 1, 1)
         cr.fill()
 
-    def draw(self, x, y, width, height, rgb_data):
-        assert len(rgb_data) == width * height * 3
+    def draw(self, x, y, width, height, coding, img_data):
         gc = self._backing.new_gc()
-        self._backing.draw_rgb_image(gc, x, y, width, height,
-                                     gtk.gdk.RGB_DITHER_NONE, rgb_data)
-        self.window.invalidate_rect(gtk.gdk.Rectangle(x, y, width, height),
-                                    False)
+        if coding != "rgb24":
+            loader = gtk.gdk.PixbufLoader(coding)
+            loader.write(img_data, len(img_data))
+            pixbuf = loader.get_pixbuf()
+            loader.close()
+            self._backing.draw_pixbuf(gc, pixbuf, 0, 0, x, y, width, height)
+        else:
+            assert len(img_data) == width * height * 3
+            self._backing.draw_rgb_image(gc, x, y, width, height,
+										 gtk.gdk.RGB_DITHER_NONE, img_data)
+        self.window.invalidate_rect(gtk.gdk.Rectangle(x, y, width, height), False)
 
     def do_expose_event(self, event):
         if not self.flags() & gtk.MAPPED:
@@ -272,10 +280,14 @@
         "received-gibberish": n_arg_signal(1),
         }
 
-    def __init__(self, conn, compression_level):
+    def __init__(self, conn, compression_level, jpegquality, title_suffix, password_file, pulseaudio):
         gobject.GObject.__init__(self)
         self._window_to_id = {}
         self._id_to_window = {}
+        self.title_suffix = title_suffix
+        self.password_file = password_file
+        self.compression_level = compression_level
+        self.jpegquality = jpegquality
 
         self._protocol = Protocol(conn, self.process_packet)
         ClientSource(self._protocol)
@@ -284,7 +296,7 @@
             capabilities_request["deflate"] = compression_level
         root_w, root_h = gtk.gdk.get_default_root_window().get_size()
         capabilities_request["desktop_size"] = [root_w, root_h]
-        self.send(["hello", capabilities_request])
+        self.send_hello()
 
         self._keymap = gtk.gdk.keymap_get_default()
         self._keymap.connect("keys-changed", self._keys_changed)
@@ -326,13 +338,46 @@
     def send_mouse_position(self, packet):
         self._protocol.source.queue_mouse_position_packet(packet)
 
+    def send_hello(self, hash=None):
+        capabilities_request = dict(default_capabilities)
+        if hash:
+            capabilities_request["challenge_response"] = hash
+        if self.compression_level:
+            capabilities_request["deflate"] = self.compression_level
+        if self.jpegquality:
+            capabilities_request["jpeg"] = self.jpegquality
+        root_w, root_h = gtk.gdk.get_default_root_window().get_size()
+        capabilities_request["desktop_size"] = [root_w, root_h]
+        self.send(["hello", capabilities_request])
+
+    def _process_challenge(self, packet):
+        if not self.password_file:
+            log.error("password is required by the server")
+            gtk.main_quit()
+            return
+        import hmac
+        passwordFile = open(self.password_file, "rU")
+        password = passwordFile.read()
+        (_, salt) = packet
+        hash = hmac.HMAC(password, salt)
+        self.send_hello(hash.hexdigest())
+
+    def version_no_minor(self, version):
+        if not version:
+            return    version
+        p = version.rfind(".")
+        if p>0:
+            return version[:p]
+        else:
+            return version
+
     def _process_hello(self, packet):
         (_, capabilities) = packet
         if "deflate" in capabilities:
             self._protocol.enable_deflate(capabilities["deflate"])
-        if capabilities.get("__prerelease_version") != xpra.__version__:
-            log.error("sorry, I only know how to talk to v%s servers",
-                      xpra.__version__)
+        remote_version = capabilities.get("__prerelease_version")
+        if self.version_no_minor(remote_version) != self.version_no_minor(xpra.__version__):
+            log.error("sorry, I only know how to talk to v%s.x servers", self.version_no_minor(xpra.__version__))
             gtk.main_quit()
             return
         if "desktop_size" in capabilities:
@@ -366,8 +411,7 @@
     def _process_draw(self, packet):
         (_, id, x, y, width, height, coding, data) = packet
         window = self._id_to_window[id]
-        assert coding == "rgb24"
-        window.draw(x, y, width, height, data)
+        window.draw(x, y, width, height, coding, data)
 
     def _process_window_metadata(self, packet):
         (_, id, metadata) = packet
@@ -395,6 +439,7 @@
         self.emit("received-gibberish", data)
 
     _packet_handlers = {
+        "challenge": _process_challenge,
         "hello": _process_hello,
         "new-window": _process_new_window,
         "new-override-redirect": _process_new_override_redirect,
diff -urN xpra-upstream/xpra/darwin/gui.py xpra-0.0.7.16-4/xpra/darwin/gui.py
--- xpra-upstream/xpra/darwin/gui.py	1970-01-01 07:00:00.000000000 +0700
+++ xpra-0.0.7.16-4/xpra/darwin/gui.py	2010-12-10 03:02:07.990038000 +0700
@@ -0,0 +1,67 @@
+# This file is part of Parti.
+# Copyright (C) 2010 Nathaniel Smith <njs@pobox.com>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+# Platform-specific code for Win32 -- the parts that may import gtk.
+
+def grok_modifier_map(display_source):
+    modifier_map = {
+        "shift": 1 << 0,
+        "lock": 1 << 1,
+        "control": 1 << 2,
+        "mod1": 1 << 3,
+        "mod2": 1 << 4,
+        "mod3": 1 << 5,
+        "mod4": 1 << 6,
+        "mod5": 1 << 7,
+        "scroll": 0,
+        "num": 0,
+        "meta": 1 << 3,
+        "super": 0,
+        "hyper": 0,
+        "alt": 0,
+        }
+    modifier_map["nuisance"] = (modifier_map["lock"]
+                                | modifier_map["scroll"]
+                                | modifier_map["num"])
+    return modifier_map
+
+class ClipboardProtocolHelper(object):
+    def __init__(self, send_packet_cb):
+        self.send = send_packet_cb
+
+    def send_all_tokens(self):
+        pass
+
+    def process_clipboard_packet(self, packet):
+        packet_type = packet[0]
+        if packet_type == "clipboard_request":
+            (_, request_id, selection, target) = packet
+            self.send(["clipboard-contents-none", request_id, selection])
+
+class ClientExtras(object):
+    def __init__(self, send_packet_cb):
+        self.send = send_packet_cb
+        self.setup_macdock()
+
+    def setup_macdock(self):
+        print "setup_macdock()"
+        self.mac_dock = None
+        try:
+            import os
+            import gtk.gdk
+            import igemacintegration		#@UnresolvedImport
+            self.mac_dock = igemacintegration.MacDock()
+            if "XDG_DATA_DIRS" in os.environ:
+                filename = os.path.join(os.environ["XDG_DATA_DIRS"], "icons", "xpra.png")
+                print "setup_macdock() trying to load icon from %s" % filename
+                pixbuf = gtk.gdk.pixbuf_new_from_file(filename)
+                self.mac_dock.set_icon_from_pixbuf(pixbuf)
+            self.mac_dock.connect('quit-activate', gtk.main_quit)
+        except Exception, e:
+            print "failed to create dock: %s" % e
+
+
+    def handshake_complete(self, capabilities):
+        pass
diff -urN xpra-upstream/xpra/darwin/__init__.py xpra-0.0.7.16-4/xpra/darwin/__init__.py
--- xpra-upstream/xpra/darwin/__init__.py	1970-01-01 07:00:00.000000000 +0700
+++ xpra-0.0.7.16-4/xpra/darwin/__init__.py	2010-12-05 02:07:41.391928001 +0700
@@ -0,0 +1,10 @@
+# This file is part of Parti.
+# Copyright (C) 2010 Nathaniel Smith <njs@pobox.com>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+# Platform-specific code for Mac OS X.
+
+XPRA_LOCAL_SERVERS_SUPPORTED = False
+DEFAULT_SSH_CMD = "ssh"
+GOT_PASSWORD_PROMPT_SUGGESTION = "Perhaps you need to set up your ssh agent?\n"
diff -urN xpra-upstream/xpra/dotxpra.py xpra-0.0.7.16-4/xpra/dotxpra.py
--- xpra-upstream/xpra/dotxpra.py	2010-10-04 02:06:27.143618171 +0700
+++ xpra-0.0.7.16-4/xpra/dotxpra.py	2010-10-04 02:05:00.000000000 +0700
@@ -3,7 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import os
 import os.path
 import glob
 import socket
diff -urN xpra-upstream/xpra/__init__.py xpra-0.0.7.16-4/xpra/__init__.py
--- xpra-upstream/xpra/__init__.py	2010-10-04 02:06:27.141618262 +0700
+++ xpra-0.0.7.16-4/xpra/__init__.py	2010-10-09 17:16:16.874845593 +0700
@@ -6,6 +6,6 @@
 import pygtk
 pygtk.require('2.0')
 
-__version__ = "0.0.6"
+__version__ = "0.0.7.16"
 import wimpiggy
 assert wimpiggy.__version__ == __version__
diff -urN xpra-upstream/xpra/keys.py xpra-0.0.7.16-4/xpra/keys.py
--- xpra-upstream/xpra/keys.py	2010-10-04 02:06:27.144618177 +0700
+++ xpra-0.0.7.16-4/xpra/keys.py	2010-10-12 16:16:07.919898379 +0700
@@ -3,8 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-from xpra.platform.gui import grok_modifier_map
-
 def mask_to_names(mask, modifier_map):
     modifiers = []
     for modifier in ["shift", "control",
diff -urN xpra-upstream/xpra/platform/gui.py xpra-0.0.7.16-4/xpra/platform/gui.py
--- xpra-upstream/xpra/platform/gui.py	2010-10-04 02:06:27.145618200 +0700
+++ xpra-0.0.7.16-4/xpra/platform/gui.py	2010-12-05 02:43:35.949928001 +0700
@@ -6,8 +6,11 @@
 ### NOTE: this must be kept in sync with the version in
 ###    xpra/platform/__init__.py 
 import os as _os
+import sys as _sys
 if _os.name == "nt":
     from xpra.win32.gui import *
+elif _sys.platform.startswith("darwin"):
+    from xpra.darwin.gui import *
 elif _os.name == "posix":
     from xpra.xposix.gui import *
 else:
diff -urN xpra-upstream/xpra/platform/__init__.py xpra-0.0.7.16-4/xpra/platform/__init__.py
--- xpra-upstream/xpra/platform/__init__.py	2010-10-04 02:06:27.145618200 +0700
+++ xpra-0.0.7.16-4/xpra/platform/__init__.py	2010-12-05 02:08:07.916928001 +0700
@@ -6,8 +6,11 @@
 ### NOTE: this must be kept in sync with the version in
 ###    xpra/platform/gui.py 
 import os as _os
+import sys as _sys
 if _os.name == "nt":
     from xpra.win32 import *
+elif _sys.platform.startswith("darwin"):
+    from xpra.darwin import *
 elif _os.name == "posix":
     from xpra.xposix import *
 else:
diff -urN xpra-upstream/xpra/protocol.py xpra-0.0.7.16-4/xpra/protocol.py
--- xpra-upstream/xpra/protocol.py	2010-10-04 02:06:27.146618164 +0700
+++ xpra-0.0.7.16-4/xpra/protocol.py	2010-10-13 01:36:54.303949679 +0700
@@ -79,6 +79,7 @@
         self._read_queue = Queue()
         # Invariant: if .source is None, then _source_has_more == False
         self.source = None
+        self.jpegquality = 0
         self._source_has_more = False
         self._closed = False
         self._read_decoder = IncrBDecode()
diff -urN xpra-upstream/xpra/proxy.py xpra-0.0.7.16-4/xpra/proxy.py
--- xpra-upstream/xpra/proxy.py	2010-10-04 02:06:27.146618164 +0700
+++ xpra-0.0.7.16-4/xpra/proxy.py	2010-10-04 02:05:00.000000000 +0700
@@ -3,8 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import threading
-
 from wimpiggy.log import Logger
 log = Logger()
 
diff -urN xpra-upstream/xpra/scripts/client_launcher.py xpra-0.0.7.16-4/xpra/scripts/client_launcher.py
--- xpra-upstream/xpra/scripts/client_launcher.py	1970-01-01 07:00:00.000000000 +0700
+++ xpra-0.0.7.16-4/xpra/scripts/client_launcher.py	2010-10-04 02:05:00.000000000 +0700
@@ -0,0 +1,62 @@
+# This file is part of Parti.
+# Copyright (C) 2009 Antoine Martin <antoine@nagafix.co.uk>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+""" client_launcher.py
+
+This is a simple GUI for starting the xpra client.
+
+"""
+
+import pygtk
+pygtk.require('2.0')
+import gtk
+import pango
+import socket
+from xpra.client import XpraClient
+
+class ApplicationWindow:
+
+    def    __init__(self):
+        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
+        self.window.connect("destroy", self.destroy)
+
+        vbox = gtk.VBox(False, 0)
+        vbox.set_spacing(15)
+        label = gtk.Label("Connect to xpra server")
+        label.modify_font(pango.FontDescription("sans 13"))
+        vbox.pack_start(label)
+        hbox = gtk.HBox(False, 0)
+        hbox.set_spacing(5)
+        self.host_entry = gtk.Entry(max=64)
+        self.host_entry.set_width_chars(16)
+        self.host_entry.set_text("127.0.0.1")
+        self.port_entry = gtk.Entry(max=5)
+        self.port_entry.set_width_chars(5)
+        self.port_entry.set_text("16010")
+        hbox.pack_start(self.host_entry)
+        hbox.pack_start(gtk.Label(":"))
+        hbox.pack_start(self.port_entry)
+        vbox.pack_start(hbox)
+        self.button = gtk.Button("Connect")
+        self.button.connect("clicked", self.connect_clicked, None)
+        vbox.pack_start(self.button)
+
+        self.window.add(vbox)
+        self.window.show_all()
+    
+    def connect_clicked(self, *args):
+        host = self.host_entry.get_text()
+        port = self.port_entry.get_text()
+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        sock.connect((host, int(port)))
+        app = XpraClient(sock, 3, None)
+        app.run()
+
+    def destroy(self, *args):
+        gtk.main_quit()
+
+if __name__ == "__main__":
+    app = ApplicationWindow()
+    gtk.main()
diff -urN xpra-upstream/xpra/scripts/main.py xpra-0.0.7.16-4/xpra/scripts/main.py
--- xpra-upstream/xpra/scripts/main.py	2010-10-04 02:06:27.148618193 +0700
+++ xpra-0.0.7.16-4/xpra/scripts/main.py	2010-10-08 11:17:50.471244561 +0700
@@ -3,7 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import gobject
 import sys
 import os
 import socket
@@ -72,6 +71,19 @@
                           dest="bind_tcp", default=None,
                           metavar="[HOST]:PORT",
                           help="Listen for connections over TCP (insecure)")
+    parser.add_option("--no-pulseaudio", action="store_false",
+                      dest="pulseaudio", default=True,
+                      help="Disable pulseaudio support via X11 root window properties")
+    parser.add_option("--password-file", action="store",
+                      dest="password_file", default=None,
+                      help="The file containing the password required to connect (useful to secure TCP mode)")
+    parser.add_option("--title-suffix", action="store",
+                      dest="title_suffix", default=" (via xpra)",
+                      help="Text which is appended to the window's title")
+    parser.add_option("--jpeg-quality", action="store",
+                      metavar="LEVEL",
+                      dest="jpegquality", type="int", default="0",
+                      help="Use jpeg compression with given quality (1-100), 0 disables jpeg compression. Default: disabled.")
     parser.add_option("-z", "--compress", action="store",
                       dest="compression_level", type="int", default=3,
                       metavar="LEVEL",
@@ -239,7 +251,9 @@
     conn = connect_or_fail(pick_display(parser, opts, extra_args))
     if opts.compression_level < 0 or opts.compression_level > 9:
         parser.error("Compression level must be between 0 and 9 inclusive.")
-    app = XpraClient(conn, opts.compression_level)
+    if opts.jpegquality < 0 or opts.jpegquality > 100:
+        parser.error("Jpeg quality must be between 0 and 100 inclusive.")
+    app = XpraClient(conn, opts.compression_level, opts.jpegquality, opts.title_suffix, opts.password_file, opts.pulseaudio)
     app.connect("handshake-complete", handshake_complete_msg)
     app.connect("received-gibberish", got_gibberish_msg)
     app.run()
@@ -253,7 +267,7 @@
 
 def run_stop(parser, opts, extra_args):
     assert "gtk" not in sys.modules
-    magic_string = bencode(["hello", []]) + bencode(["shutdown-server"])
+    magic_string = bencode(["hello", {"__prerelease_version": xpra.__version__}]) + bencode(["shutdown-server"])
 
     display_desc = pick_display(parser, opts, extra_args)
     conn = connect_or_fail(display_desc)
@@ -263,7 +277,7 @@
         pass
     if display_desc["local"]:
         sockdir = DotXpra()
-        for i in xrange(6):
+        for _ in xrange(6):
             final_state = sockdir.server_state(display_desc["display"])
             if final_state is DotXpra.LIVE:
                 time.sleep(0.5)
@@ -304,3 +318,6 @@
                 else:
                     sys.stdout.write(" (cleaned up)")
             sys.stdout.write("\n")
+
+if __name__ == "__main__":
+    main("xpra.exe", sys.argv)
diff -urN xpra-upstream/xpra/scripts/server.py xpra-0.0.7.16-4/xpra/scripts/server.py
--- xpra-upstream/xpra/scripts/server.py	2010-10-04 02:06:27.149618151 +0700
+++ xpra-0.0.7.16-4/xpra/scripts/server.py	2010-10-04 02:05:00.000000000 +0700
@@ -10,7 +10,6 @@
 import gobject
 import subprocess
 import sys
-import os
 import os.path
 import atexit
 import signal
@@ -63,7 +62,7 @@
     def __call__(self, signum, frame):
         while 1:
             try:
-                pid, status = os.waitpid(-1, os.WNOHANG)
+                pid, _ = os.waitpid(-1, os.WNOHANG)
             except OSError:
                 break
             if pid == 0:
@@ -303,7 +302,7 @@
 
     # This import is delayed because the module depends on gtk:
     import xpra.server
-    app = xpra.server.XpraServer(upgrading, sockets)
+    app = xpra.server.XpraServer(upgrading, sockets, opts.password_file, opts.pulseaudio)
     def cleanup_socket(self):
         print "removing socket"
         try:
diff -urN xpra-upstream/xpra/server.py xpra-0.0.7.16-4/xpra/server.py
--- xpra-upstream/xpra/server.py	2010-10-04 02:06:27.150618254 +0700
+++ xpra-0.0.7.16-4/xpra/server.py	2010-10-15 02:21:55.744477716 +0700
@@ -14,6 +14,10 @@
 import cairo
 import sys
 import subprocess
+import hmac
+import uuid
+import Image
+import StringIO
 
 from wimpiggy.wm import Wm
 from wimpiggy.util import (AdHocStruct,
@@ -29,7 +33,7 @@
 from wimpiggy.prop import prop_set
 from wimpiggy.window import OverrideRedirectWindowModel, Unmanageable
 from wimpiggy.keys import grok_modifier_map
-from wimpiggy.error import *
+from wimpiggy.error import XError, trap
 
 from wimpiggy.log import Logger
 log = Logger()
@@ -106,7 +110,7 @@
         self._models[model].window = window
 
     def window_size(self, model):
-        (x, y, w, h) = self._models[model].geom
+        (_, _, w, h) = self._models[model].geom
         return (w, h)
 
     def window_position(self, model, w, h):
@@ -165,17 +169,18 @@
                 log.error("wtf, pixmap is None?")
                 packet = None
             else:
-                (x2, y2, w2, h2, data) = self._get_rgb_data(pixmap, x, y, w, h)
+                (x2, y2, w2, h2, coding, data) = self._get_rgb_data(pixmap, x, y, w, h)
                 if not w2 or not h2:
                     packet = None
                 else:
-                    packet = ["draw", id, x2, y2, w2, h2, "rgb24", data]
+                    packet = ["draw", id, x2, y2, w2, h2, coding, data]
         else:
             packet = None
         return packet, self._have_more()
 
     def _get_rgb_data(self, pixmap, x, y, width, height):
         pixmap_w, pixmap_h = pixmap.get_size()
+        coding = "rgb24"
         # Just in case we somehow end up with damage larger than the pixmap,
         # we don't want to start requesting random chunks of memory (this
         # could happen if a window is resized but we don't throw away our
@@ -187,7 +192,7 @@
         if y + height > pixmap_h:
             height = pixmap_h - y
         if width <= 0 or height <= 0:
-            return (0, 0, 0, 0, "")
+            return (0, 0, 0, 0, coding, "")
         pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)
         pixbuf.get_from_drawable(pixmap, pixmap.get_colormap(),
                                  x, y, 0, 0, width, height)
@@ -201,14 +206,26 @@
             for i in xrange(height):
                 rows.append(raw_data[i*rowstride : i*rowstride+rowwidth])
             data = "".join(rows)
-        return (x, y, width, height, data)
+
+        # should probably have some other conditions for
+        # enabling jpeg compression (for example len(data) > N and/or
+        # width*height > M)
+        if self._protocol.jpegquality > 0:
+            im = Image.fromstring("RGB", (width,height), data)
+            buf=StringIO.StringIO()
+            im.save(buf,"JPEG", quality=self._protocol.jpegquality)
+            data=buf.getvalue()
+            buf.close()
+            coding = "jpeg"
+
+        return (x, y, width, height, coding, data)
 
 class XpraServer(gobject.GObject):
     __gsignals__ = {
         "wimpiggy-child-map-event": one_arg_signal,
         }
 
-    def __init__(self, clobber, sockets):
+    def __init__(self, clobber, sockets, password_file, pulseaudio):
         gobject.GObject.__init__(self)
         
         # Do this before creating the Wm object, to avoid clobbering its
@@ -295,6 +312,11 @@
         self._has_focus = 0
         self._upgrading = False
 
+        self.password_file = password_file
+        self.salt = None
+        
+        self.pulseaudio = pulseaudio
+
         ### All right, we're ready to accept customers:
         for sock in sockets:
             self.add_listen_socket(sock)
@@ -305,16 +327,21 @@
 
     def quit(self, upgrading):
         self._upgrading = upgrading
+        log.info("\nxpra is terminating.")
         gtk_main_quit_really()
 
     def run(self):
         gtk_main_quit_on_fatal_exceptions_enable()
+        def print_ready():
+            log.info("\nxpra is ready.")
+        gobject.idle_add(print_ready)
         gtk.main()
+        log.info("\nxpra end of gtk.main().")
         return self._upgrading
 
     def _new_connection(self, listener, *args):
         log.info("New connection received")
-        sock, addr = listener.accept()
+        sock, _ = listener.accept()
         self._potential_protocols.append(Protocol(SocketConnection(sock),
                                                   self.process_packet))
         return True
@@ -345,7 +372,7 @@
         self._add_new_window_common(window)
         for prop in self._window_export_properties:
             window.connect("notify::%s" % prop, self._update_metadata)
-        (x, y, w, h, depth) = window.get_property("client-window").get_geometry()
+        (x, y, w, h, _) = window.get_property("client-window").get_geometry()
         self._desktop_manager.add_window(window, x, y, w, h)
         self._send_new_window_packet(window)
 
@@ -502,7 +529,7 @@
 
     def _calculate_capabilities(self, client_capabilities):
         capabilities = {}
-        for cap in ("deflate", "__prerelease_version"):
+        for cap in ("deflate", "__prerelease_version", "challenge_response", "jpeg"):
             if cap in client_capabilities:
                 capabilities[cap] = client_capabilities[cap]
         if "desktop_size" in client_capabilities:
@@ -512,15 +539,54 @@
                                             min(client_h, root_h)]
         return capabilities
 
+    def version_no_minor(self, version):
+        if not version:
+            return    version
+        p = version.rfind(".")
+        if p>0:
+            return version[:p]
+        else:
+            return version
+
     def _process_hello(self, proto, packet):
         (_, client_capabilities) = packet
         log.info("Handshake complete; enabling connection")
         capabilities = self._calculate_capabilities(client_capabilities)
-        if capabilities.get("__prerelease_version") != xpra.__version__:
+        remote_version = capabilities.get("__prerelease_version")
+        if self.version_no_minor(remote_version) != self.version_no_minor(xpra.__version__):
             log.error("Sorry, this pre-release server only works with clients "
-                      + "of exactly the same version (v%s)", xpra.__version__)
+                      + "of the same major version (v%s), but this client is using v%s", xpra.__version__, remote_version)
             proto.close()
             return
+        if self.password_file:
+            log.debug("password auth required")
+            client_hash = capabilities.get("challenge_response")
+            if not client_hash or not self.salt:
+                self.salt = "%s" % uuid.uuid4()
+                capabilities["challenge"] = self.salt
+                log.info("Password required, sending challenge: %s" % str(capabilities))
+                packet = ("challenge", self.salt)
+                socket = proto._conn._s
+                log.info("proto=%s, conn=%s, socket=%s" % (repr(proto), repr(proto._conn), socket))
+                from xpra.bencode import bencode
+                import select
+                data = bencode(packet)
+                written = 0
+                while written < len(data):
+                    select.select([], [socket], [])
+                    written += socket.send(data[written:])
+                return
+            passwordFile = open(self.password_file, "rU")
+            password  = passwordFile.read()
+            hash = hmac.HMAC(password, self.salt)
+            if client_hash != hash.hexdigest():
+                log.error("Password supplied does not match! dropping the connection.")
+                gobject.timeout_add(1000, self._login_failed, proto)
+                return
+            else:
+                log.info("Password matches!")
+                del capabilities["challenge_response"]
+                self.salt = None            #prevent replay attacks
         # Okay, things are okay, so let's boot out any existing connection and
         # set this as our new one:
         if self._protocol is not None:
@@ -530,6 +596,8 @@
         self._send(["hello", capabilities])
         if "deflate" in capabilities:
             self._protocol.enable_deflate(capabilities["deflate"])
+        if "jpeg" in capabilities:
+            self._protocol.jpegquality = capabilities["jpeg"]
         # We send the new-window packets sorted by id because this sorts them
         # from oldest to newest -- and preserving window creation order means
         # that the earliest override-redirect windows will be on the bottom,
@@ -556,12 +624,13 @@
                     self._xsettings_manager = XSettingsManager(v)
                 elif k == "resource-manager":
                     root_set("RESOURCE_MANAGER")
-                elif k == "pulse-cookie":
-                    root_set("PULSE_COOKIE")
-                elif k == "pulse-id":
-                    root_set("PULSE_ID")
-                elif k == "pulse-server":
-                    root_set("PULSE_SERVER")
+                elif self.pulseaudio:
+                    if k == "pulse-cookie":
+                        root_set("PULSE_COOKIE")
+                    elif k == "pulse-id":
+                        root_set("PULSE_ID")
+                    elif k == "pulse-server":
+                        root_set("PULSE_SERVER")
 
     def _process_map_window(self, proto, packet):
         (_, id, x, y, width, height) = packet
@@ -642,6 +711,7 @@
         if proto in self._potential_protocols:
             self._potential_protocols.remove(proto)
         if proto is self._protocol:
+            log.info("xpra client disconnected.")
             self._protocol = None
 
     def _process_gibberish(self, proto, packet):
diff -urN xpra-upstream/xpra/xposix/gui.py xpra-0.0.7.16-4/xpra/xposix/gui.py
--- xpra-upstream/xpra/xposix/gui.py	2010-10-04 02:06:27.153618155 +0700
+++ xpra-0.0.7.16-4/xpra/xposix/gui.py	2010-10-13 01:26:05.154951722 +0700
@@ -7,11 +7,12 @@
 # may import gtk.
 
 from wimpiggy.keys import grok_modifier_map
-
+assert grok_modifier_map		#make pydev happy: this import is needed as it is part of the gui "interface"
 from xpra.xposix.xclipboard import ClipboardProtocolHelper
-
+assert ClipboardProtocolHelper	#make pydev happy: this import is needed as it is part of the gui "interface"
 from xpra.xposix.xsettings import XSettingsWatcher
 from xpra.xposix.xroot_props import XRootPropWatcher
+
 class ClientExtras(object):
     def __init__(self, send_packet_cb):
         self.send = send_packet_cb
diff -urN xpra-upstream/xpra/xposix/xclipboard.py xpra-0.0.7.16-4/xpra/xposix/xclipboard.py
--- xpra-upstream/xpra/xposix/xclipboard.py	2010-10-04 02:06:27.154618149 +0700
+++ xpra-0.0.7.16-4/xpra/xposix/xclipboard.py	2010-10-04 02:05:00.000000000 +0700
@@ -9,7 +9,7 @@
 
 from wimpiggy.util import n_arg_signal
 from wimpiggy.prop import prop_get
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.lowlevel import (get_xatom, get_pywindow,
                                gdk_atom_objects_from_gdk_atom_array)
 
diff -urN xpra-upstream/xpra/xposix/xsettings.py xpra-0.0.7.16-4/xpra/xposix/xsettings.py
--- xpra-upstream/xpra/xposix/xsettings.py	2010-10-04 02:06:27.154618149 +0700
+++ xpra-0.0.7.16-4/xpra/xposix/xsettings.py	2010-10-04 02:05:00.000000000 +0700
@@ -5,7 +5,7 @@
 from wimpiggy.selection import ManagerSelection
 from wimpiggy.prop import prop_set, prop_get
 from wimpiggy.lowlevel import (myGetSelectionOwner, const, get_pywindow,
-                               add_event_receiver, remove_event_receiver,
+                               add_event_receiver,
                                get_xatom)
 from wimpiggy.log import Logger
 log = Logger()
@@ -84,7 +84,7 @@
         log("Fetching current XSettings data")
         try:
             return trap.call(self._get_settings_blob)
-        except XError, e:
+        except XError, _:
             log("X error while fetching XSettings data; ignored")
             return None
         
diff -urN xpra-upstream/yatest.py xpra-0.0.7.16-4/yatest.py
--- xpra-upstream/yatest.py	2010-10-04 02:06:27.157618256 +0700
+++ xpra-0.0.7.16-4/yatest.py	2010-10-04 02:04:50.000000000 +0700
@@ -41,7 +41,6 @@
 #      they are defined, not where they have been imported?
 
 import sys
-import os
 import os.path
 import traceback
 import signal
