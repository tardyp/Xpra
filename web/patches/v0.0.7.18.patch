diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/changelog dev/changelog
--- upstream/changelog	1970-01-01 07:00:00.000000000 +0700
+++ dev/changelog	2011-03-26 02:21:42.015951138 +0700
@@ -0,0 +1,23 @@
+xpra 0.0.7.18 DISTRIBUTION; urgency: normal
+	* Add ability to disable clipboard code
+	* Updated man page
+
+xpra 0.0.7.17 DISTRIBUTION; urgency: normal
+	* Honour the pulseaudio flag on client
+
+xpra 0.0.7.16 DISTRIBUTION; urgency: normal
+	* Merged large set of changes from upstream
+
+xpra 0.0.7.15 DISTRIBUTION; urgency: normal
+	* Add option to disable Pulseaudio forwarding as this can be a real network hog.
+	* Use logging rather than print statements.
+	* Dont reject client/server versions with the same micro number: 0.0.7.15 onwards will happily connect/accept connection to/from any 0.0.7.x version.
+
+xpra 0.0.7.13 DISTRIBUTION; urgency: normal
+	* Ignore minor version differences in the future: must bump to 0.0.8 to cause incompatibility error
+
+xpra 0.0.7.12 DISTRIBUTION; urgency: normal
+	* bump screen resolution
+
+xpra 0.0.7.9 DISTRIBUTION; urgency: normal
+	* Initial packaging
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/do-rpm-build dev/do-rpm-build
--- upstream/do-rpm-build	1970-01-01 07:00:00.000000000 +0700
+++ dev/do-rpm-build	2010-10-09 17:31:39.127800030 +0700
@@ -0,0 +1,6 @@
+#!/bin/sh
+
+set -e
+rm -rf build install
+python make_constants_pxi.py wimpiggy/lowlevel/constants.txt wimpiggy/lowlevel/constants.pxi
+CFLAGS=-O0 python setup.py install
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/make_rpm.sh dev/make_rpm.sh
--- upstream/make_rpm.sh	1970-01-01 07:00:00.000000000 +0700
+++ dev/make_rpm.sh	2010-10-04 02:04:50.000000000 +0700
@@ -0,0 +1,13 @@
+#!/bin/bash
+
+rm -fr build install
+python ./setup.py sdist
+SOURCES=~/rpmbuild/SOURCES/
+grep CentOS /etc/redhat-release
+if [ "$?" == "0" ]; then
+	SOURCES="/usr/src/redhat/SOURCES/"
+fi
+cp dist/parti-all-*.tar.gz ${SOURCES}
+PYTHON_SITELIB=`python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"`
+rpmbuild -ba xpra.spec --define "python_sitelib ${PYTHON_SITELIB}"
+
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/NEWS dev/NEWS
--- upstream/NEWS	2010-10-04 02:06:27.098618230 +0700
+++ dev/NEWS	2011-03-26 02:20:31.039121562 +0700
@@ -1,3 +1,12 @@
+v0.0.7.x
+==================
+Lots of new features and options.
+	-- Password support
+	-- Ability to disable pulseaudio and clipboard code
+	-- Better OSX/win32 support
+	-- Lots of small fixes
+
+
 v0.0.6 (2009-03-22)
 ===================
 
@@ -5,12 +14,8 @@
   New features:
     -- Clipboard sharing (with full X semantics).
     -- Icon support.
-    -- Support for raw TCP sockets. (This is horrendously insecure in
-       most contexts, but provided for certain use cases -- like some
-       virtualization environments -- where the network is wholly
-       trusted and ssh tunneling creates too much overhead. The
-       built-in ssh tunneling support is still the recommended
-       approach.) (Thanks to Antoine Martin.)
+    -- Support for raw TCP sockets. Insecure if you don't know what
+       you are doing.
 
   Bug fixes:
     -- Xvfb doesn't support mouse wheels, so they still don't work in
Binary files upstream/Output/setup.exe and dev/Output/setup.exe differ
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/parti/__init__.py dev/parti/__init__.py
--- upstream/parti/__init__.py	2010-10-04 02:06:27.102618269 +0700
+++ dev/parti/__init__.py	2011-03-26 02:30:08.528855274 +0700
@@ -6,6 +6,6 @@
 import pygtk
 pygtk.require('2.0')
 
-__version__ = "0.0.6"
+__version__ = "0.0.7.18"
 import wimpiggy
 assert wimpiggy.__version__ == __version__
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/parti/scripts/main.py dev/parti/scripts/main.py
--- upstream/parti/scripts/main.py	2010-10-04 02:06:27.106618177 +0700
+++ dev/parti/scripts/main.py	2010-10-04 02:04:50.000000000 +0700
@@ -17,7 +17,7 @@
     parser.add_option("-t", "--tray",
                       dest="tray", default="CompositeTest",
                       help="Set default tray type")
-    (options, args) = parser.parse_args(cmdline[1:])
+    (options, _) = parser.parse_args(cmdline[1:])
 
     # This means, if an exception propagates to the gtk mainloop, then pass it
     # on outwards.  Or at least it did at one time; dunno if it actually does
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/parti/scripts/repl.py dev/parti/scripts/repl.py
--- upstream/parti/scripts/repl.py	2010-10-04 02:06:27.106618177 +0700
+++ dev/parti/scripts/repl.py	2010-10-04 02:04:50.000000000 +0700
@@ -12,7 +12,7 @@
 
 def main(cmdline):
     parser = PartiOptionParser()
-    (options, args) = parser.parse_args(cmdline[1:])
+    parser.parse_args(cmdline[1:])
 
     # This means, if an exception propagates to the gtk mainloop, then pass it
     # on outwards.  Or at least it did at one time; dunno if it actually does
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/scripts/xpra_launcher dev/scripts/xpra_launcher
--- upstream/scripts/xpra_launcher	1970-01-01 07:00:00.000000000 +0700
+++ dev/scripts/xpra_launcher	2011-03-28 21:16:23.504979726 +0700
@@ -0,0 +1,5 @@
+#!/usr/bin/env python
+
+from xpra.scripts.client_launcher import main
+
+main()
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/setup.py dev/setup.py
--- upstream/setup.py	2010-10-04 02:06:27.114618196 +0700
+++ dev/setup.py	2011-03-26 01:49:02.142814778 +0700
@@ -96,7 +96,7 @@
     packages=["wimpiggy", "wimpiggy.lowlevel",
               "parti", "parti.trays", "parti.addons", "parti.scripts",
               "xpra", "xpra.scripts", "xpra.platform",
-              "xpra.xposix", "xpra.win32",
+              "xpra.xposix", "xpra.win32", "xpra.darwin",
               ],
     scripts=["scripts/parti", "scripts/parti-repl",
              "scripts/xpra",
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/setup-win-py2exe.py dev/setup-win-py2exe.py
--- upstream/setup-win-py2exe.py	1970-01-01 07:00:00.000000000 +0700
+++ dev/setup-win-py2exe.py	2011-03-28 20:40:15.036769404 +0700
@@ -0,0 +1,40 @@
+from distutils.core import setup
+import py2exe
+
+setup(
+    name = 'Xpra',
+    description = 'screen for X',
+    version = '0.0.7.18',
+
+    windows = [
+                  {
+                      'script': 'xpra/scripts/client_launcher.py',
+                      'icon_resources': [(1, "xpra.ico")],
+					  "dest_base": "Xpra-Launcher",
+                  },
+#                  {
+#                      'script': 'xpra/scripts/main.py',
+#                      'icon_resources': [(1, "xpra.ico")],
+#                  }
+              ],
+
+    console = [
+                  {
+                      'script': 'xpra/scripts/main.py',
+                      'icon_resources': [(1, "xpra.ico")],
+					  "dest_base": "Xpra",
+                  }
+              ],
+
+    options = {
+                  'py2exe': {
+                      'packages':'encodings',
+                      'includes': 'cairo, pango, pangocairo, atk, glib, gobject, gio',
+                      'dll_excludes': 'w9xpopen.exe'
+                  }
+              },
+
+    data_files=[
+                   'COPYING', 'website.url'
+               ]
+)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/website.url dev/website.url
--- upstream/website.url	1970-01-01 07:00:00.000000000 +0700
+++ dev/website.url	2011-03-28 14:50:48.640308900 +0700
@@ -0,0 +1,2 @@
+[InternetShortcut]
+URL=http://xpra.devloop.org.uk/
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/composite.py dev/wimpiggy/composite.py
--- upstream/wimpiggy/composite.py	2010-10-04 02:06:27.115618150 +0700
+++ dev/wimpiggy/composite.py	2010-10-04 02:04:52.000000000 +0700
@@ -5,7 +5,7 @@
 
 import gobject
 from wimpiggy.util import one_arg_signal, AutoPropGObjectMixin
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.lowlevel import (xcomposite_redirect_window,
                                xcomposite_unredirect_window,
                                xcomposite_name_window_pixmap,
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/__init__.py dev/wimpiggy/__init__.py
--- upstream/wimpiggy/__init__.py	2010-10-04 02:06:27.115618150 +0700
+++ dev/wimpiggy/__init__.py	2011-03-26 02:29:47.831942871 +0700
@@ -6,4 +6,4 @@
 import pygtk
 pygtk.require('2.0')
 
-__version__ = "0.0.6"
+__version__ = "0.0.7.18"
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/keys.py dev/wimpiggy/keys.py
--- upstream/wimpiggy/keys.py	2010-10-04 02:06:27.116618168 +0700
+++ dev/wimpiggy/keys.py	2010-10-04 02:04:52.000000000 +0700
@@ -6,7 +6,7 @@
 import gobject
 import gtk
 from wimpiggy.util import one_arg_signal
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.lowlevel import (get_display_for,
                                get_modifier_map, grab_key, ungrab_all_keys,
                                add_event_receiver, remove_event_receiver)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/lowlevel/bindings.pyx dev/wimpiggy/lowlevel/bindings.pyx
--- upstream/wimpiggy/lowlevel/bindings.pyx	2010-10-04 02:06:27.118618172 +0700
+++ dev/wimpiggy/lowlevel/bindings.pyx	2010-10-08 02:36:06.539612502 +0700
@@ -130,6 +130,7 @@
 ######
 
 include "constants.pxi"
+ctypedef unsigned long CARD32
 
 cdef extern from *:
     ctypedef struct Display:
@@ -138,7 +139,6 @@
     # appropriate pyrex declarations, without having to untangle the typedefs
     # over and over again, here are some convenience typedefs.  (Yes, CARD32
     # really is 64 bits on 64-bit systems.  Why?  I have no idea.)
-    ctypedef unsigned long CARD32
     ctypedef CARD32 XID
 
     ctypedef int Bool
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/lowlevel/__init__.py dev/wimpiggy/lowlevel/__init__.py
--- upstream/wimpiggy/lowlevel/__init__.py	2010-10-04 02:06:27.117618160 +0700
+++ dev/wimpiggy/lowlevel/__init__.py	2010-10-07 23:39:58.000000000 +0700
@@ -3,6 +3,7 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
+#We must import "*" or things will fail in mysterious ways!
 from wimpiggy.lowlevel.bindings import *
 
 from wimpiggy.log import Logger
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/prop.py dev/wimpiggy/prop.py
--- upstream/wimpiggy/prop.py	2010-10-04 02:06:27.120618245 +0700
+++ dev/wimpiggy/prop.py	2010-10-04 02:04:52.000000000 +0700
@@ -15,8 +15,8 @@
 from wimpiggy.lowlevel import \
      XGetWindowProperty, XChangeProperty, PropertyError, \
      get_xatom, get_pyatom, get_xwindow, get_pywindow, const, \
-     get_display_for, premultiply_argb_in_place
-from wimpiggy.error import *
+     premultiply_argb_in_place
+from wimpiggy.error import trap, XError
 from wimpiggy.log import Logger
 log = Logger()
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/selection.py dev/wimpiggy/selection.py
--- upstream/wimpiggy/selection.py	2010-10-04 02:06:27.121618206 +0700
+++ dev/wimpiggy/selection.py	2010-10-04 02:04:52.000000000 +0700
@@ -16,7 +16,7 @@
 from wimpiggy.lowlevel import (get_xatom, get_pywindow, sendClientMessage,
                                myGetSelectionOwner, const,
                                add_event_receiver, remove_event_receiver)
-from wimpiggy.error import *
+from wimpiggy.error import trap
 
 from wimpiggy.log import Logger
 log = Logger()
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/test_error.py dev/wimpiggy/test_error.py
--- upstream/wimpiggy/test_error.py	2010-10-04 02:06:27.122618255 +0700
+++ dev/wimpiggy/test_error.py	2010-10-04 02:04:52.000000000 +0700
@@ -4,7 +4,7 @@
 # later version. See the file COPYING for details.
 
 from wimpiggy.test import *
-from wimpiggy.error import *
+from wimpiggy.error import trap, XError
 # Need a way to generate X errors...
 import wimpiggy.lowlevel
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/test_lowlevel.py dev/wimpiggy/test_lowlevel.py
--- upstream/wimpiggy/test_lowlevel.py	2010-10-04 02:06:27.123618201 +0700
+++ dev/wimpiggy/test_lowlevel.py	2010-10-04 02:04:52.000000000 +0700
@@ -3,10 +3,11 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
+import os
 from wimpiggy.test import *
 import wimpiggy.lowlevel as l
 import gtk
-from wimpiggy.error import *
+from wimpiggy.error import trap, XError
 
 class TestLowlevel(TestWithSession):
     def root(self, disp=None):
@@ -130,8 +131,7 @@
         w2 = self.window(self.display)
         w3 = self.window(self.display)
         gtk.gdk.flush()
-        
-        import os
+
         def do_child(disp_name, xwindow1, xwindow2, xwindow3):
             print "child: in do_child"
             d2 = gtk.gdk.Display(disp_name)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/test.py dev/wimpiggy/test.py
--- upstream/wimpiggy/test.py	2010-10-04 02:06:27.121618206 +0700
+++ dev/wimpiggy/test.py	2010-10-04 02:04:52.000000000 +0700
@@ -7,7 +7,6 @@
 import sys
 import os
 import traceback
-import os
 import atexit
 import errno
 import gobject
@@ -25,7 +24,7 @@
     except exc_class:
         pass
     except:
-        (cls, e, tb) = sys.exc_info()
+        (cls, e, _) = sys.exc_info()
         raise AssertionError, (("unexpected exception: %s: %s\n"
                                + "Original traceback:\n%s")
                                % (cls, e, traceback.format_exc()))
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/window.py dev/wimpiggy/window.py
--- upstream/wimpiggy/window.py	2010-10-04 02:06:27.127618209 +0700
+++ dev/wimpiggy/window.py	2010-10-04 02:04:52.000000000 +0700
@@ -26,7 +26,7 @@
 from wimpiggy.util import (AutoPropGObjectMixin,
                            one_arg_signal,
                            non_none_list_accumulator)
-from wimpiggy.error import *
+from wimpiggy.error import trap, XError
 from wimpiggy.prop import prop_get, prop_set
 from wimpiggy.composite import CompositeHelper
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/wm.py dev/wimpiggy/wm.py
--- upstream/wimpiggy/wm.py	2010-10-04 02:06:27.128618147 +0700
+++ dev/wimpiggy/wm.py	2010-10-04 02:04:52.000000000 +0700
@@ -14,7 +14,7 @@
 else:
     ImmutableSet = frozenset
 
-from wimpiggy.error import *
+from wimpiggy.error import trap
 import wimpiggy.selection
 from wimpiggy.world_window import WorldWindow
 import wimpiggy.lowlevel
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/wimpiggy/world_window.py dev/wimpiggy/world_window.py
--- upstream/wimpiggy/world_window.py	2010-10-04 02:06:27.129618129 +0700
+++ dev/wimpiggy/world_window.py	2010-10-04 02:04:52.000000000 +0700
@@ -8,7 +8,7 @@
 import wimpiggy.lowlevel
 import wimpiggy.window
 import wimpiggy.prop
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.log import Logger
 log = Logger()
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/client.py dev/xpra/client.py
--- upstream/xpra/client.py	2010-10-04 02:06:27.143618171 +0700
+++ dev/xpra/client.py	2011-03-28 20:39:18.164469767 +0700
@@ -15,8 +15,8 @@
 log = Logger()
 
 from xpra.protocol import Protocol
-from xpra.keys import mask_to_names, grok_modifier_map
-from xpra.platform.gui import ClipboardProtocolHelper, ClientExtras
+from xpra.keys import mask_to_names
+from xpra.platform.gui import ClipboardProtocolHelper, ClientExtras, grok_modifier_map
 
 import xpra
 default_capabilities = {"__prerelease_version": xpra.__version__}
@@ -67,6 +67,7 @@
         self._metadata = {}
         self._override_redirect = override_redirect
         self._new_backing(w, h)
+        self._failed_pixbuf_index = 0
         self.update_metadata(metadata)
         
         self.set_app_paintable(True)
@@ -85,12 +86,14 @@
         self._metadata.update(metadata)
         
         title_main = self._metadata.get("title", "<untitled window>").decode("utf-8")
-        if "client-machine" in self._metadata:
+        if self._client.title_suffix:
+            title_addendum = self._client.title_suffix
+        elif "client-machine" in self._metadata:
             title_addendum = ("on %s, "
                               % (self._metadata["client-machine"].decode("utf-8"),))
         else:
-            title_addendum = ""
-        self.set_title(u"%s (%svia xpra)" % (title_main, title_addendum))
+            title_addendum = "(via xpra)"
+        self.set_title(u"%s %s" % (title_main, title_addendum))
 
         if "size-constraints" in self._metadata:
             size_metadata = self._metadata["size-constraints"]
@@ -153,13 +156,40 @@
         cr.set_source_rgb(1, 1, 1)
         cr.fill()
 
-    def draw(self, x, y, width, height, rgb_data):
-        assert len(rgb_data) == width * height * 3
+    def draw(self, x, y, width, height, coding, img_data):
         gc = self._backing.new_gc()
-        self._backing.draw_rgb_image(gc, x, y, width, height,
-                                     gtk.gdk.RGB_DITHER_NONE, rgb_data)
-        self.window.invalidate_rect(gtk.gdk.Rectangle(x, y, width, height),
-                                    False)
+        if coding != "rgb24":
+            loader = gtk.gdk.PixbufLoader(coding)
+            loader.write(img_data, len(img_data))
+            loader.close()
+            pixbuf = loader.get_pixbuf()
+            if not pixbuf:
+                if self._failed_pixbuf_index<10:
+                    import os.path, sys
+                    if sys.platform.startswith("win"):
+                        appdata = os.environ.get("APPDATA")
+                        if not os.path.exists(appdata):
+                            os.mkdir(appdata)
+                        xpra_path = os.path.join(appdata, "Xpra")
+                        if not os.path.exists(xpra_path):
+                            os.mkdir(xpra_path)
+                    else:
+                        xpra_path = os.path.expanduser("~/.xpra")
+                    failed_pixbuf_file = os.path.join(xpra_path, "failed-%s.%s" % (self._failed_pixbuf_index, coding))
+                    f = open(failed_pixbuf_file, 'wb')
+                    f.write(img_data)
+                    f.close()
+                    self._failed_pixbuf_index += 1
+                    log.error("failed %s pixbuf=%s data saved to %s, len=%s" % (coding, pixbuf, failed_pixbuf_file, len(img_data)))
+                elif self._failed_pixbuf_index==10:
+                    log.error("too many pixbuf failures! (will no longer be logged)")
+                    self._failed_pixbuf_index += 1
+            else:
+                self._backing.draw_pixbuf(gc, pixbuf, 0, 0, x, y, width, height)
+        else:
+            assert len(img_data) == width * height * 3
+            self._backing.draw_rgb_image(gc, x, y, width, height, gtk.gdk.RGB_DITHER_NONE, img_data)
+        self.window.invalidate_rect(gtk.gdk.Rectangle(x, y, width, height), False)
 
     def do_expose_event(self, event):
         if not self.flags() & gtk.MAPPED:
@@ -272,10 +302,14 @@
         "received-gibberish": n_arg_signal(1),
         }
 
-    def __init__(self, conn, compression_level):
+    def __init__(self, conn, compression_level, jpegquality, title_suffix, password_file, pulseaudio, clipboard):
         gobject.GObject.__init__(self)
         self._window_to_id = {}
         self._id_to_window = {}
+        self.title_suffix = title_suffix
+        self.password_file = password_file
+        self.compression_level = compression_level
+        self.jpegquality = jpegquality
 
         self._protocol = Protocol(conn, self.process_packet)
         ClientSource(self._protocol)
@@ -284,7 +318,7 @@
             capabilities_request["deflate"] = compression_level
         root_w, root_h = gtk.gdk.get_default_root_window().get_size()
         capabilities_request["desktop_size"] = [root_w, root_h]
-        self.send(["hello", capabilities_request])
+        self.send_hello()
 
         self._keymap = gtk.gdk.keymap_get_default()
         self._keymap.connect("keys-changed", self._keys_changed)
@@ -294,8 +328,11 @@
         self._root_props_watcher = None
 
         # FIXME: these should perhaps be merged.
-        self._clipboard_helper = ClipboardProtocolHelper(self.send)
-        self._client_extras = ClientExtras(self.send)
+        if clipboard:
+            self._clipboard_helper = ClipboardProtocolHelper(self.send)
+        else:
+            self._clipboard_helper = None
+        self._client_extras = ClientExtras(self.send, pulseaudio)
 
         self._focused = None
 
@@ -326,13 +363,51 @@
     def send_mouse_position(self, packet):
         self._protocol.source.queue_mouse_position_packet(packet)
 
+    def send_hello(self, hash=None):
+        capabilities_request = dict(default_capabilities)
+        if hash:
+            capabilities_request["challenge_response"] = hash
+        if self.compression_level:
+            capabilities_request["deflate"] = self.compression_level
+        if self.jpegquality:
+            capabilities_request["jpeg"] = self.jpegquality
+        root_w, root_h = gtk.gdk.get_default_root_window().get_size()
+        capabilities_request["desktop_size"] = [root_w, root_h]
+        self.send(["hello", capabilities_request])
+
+    def _process_disconnect(self, packet):
+        log.error("server requested disconnect: %s" % str(packet))
+        gtk.main_quit()
+        return
+
+    def _process_challenge(self, packet):
+        if not self.password_file:
+            log.error("password is required by the server")
+            gtk.main_quit()
+            return
+        import hmac
+        passwordFile = open(self.password_file, "rU")
+        password = passwordFile.read()
+        (_, salt) = packet
+        hash = hmac.HMAC(password, salt)
+        self.send_hello(hash.hexdigest())
+
+    def version_no_minor(self, version):
+        if not version:
+            return    version
+        p = version.rfind(".")
+        if p>0:
+            return version[:p]
+        else:
+            return version
+
     def _process_hello(self, packet):
         (_, capabilities) = packet
         if "deflate" in capabilities:
             self._protocol.enable_deflate(capabilities["deflate"])
-        if capabilities.get("__prerelease_version") != xpra.__version__:
-            log.error("sorry, I only know how to talk to v%s servers",
-                      xpra.__version__)
+        remote_version = capabilities.get("__prerelease_version")
+        if self.version_no_minor(remote_version) != self.version_no_minor(xpra.__version__):
+            log.error("sorry, I only know how to talk to v%s.x servers", self.version_no_minor(xpra.__version__))
             gtk.main_quit()
             return
         if "desktop_size" in capabilities:
@@ -345,7 +420,8 @@
                          "Please complain to "
                          "parti-discuss@partiwm.org"
                          % (avail_w, avail_h, root_w, root_h))
-        self._clipboard_helper.send_all_tokens()
+        if self._clipboard_helper:
+            self._clipboard_helper.send_all_tokens()
         self._client_extras.handshake_complete(capabilities)
         self.emit("handshake-complete")
 
@@ -366,8 +442,7 @@
     def _process_draw(self, packet):
         (_, id, x, y, width, height, coding, data) = packet
         window = self._id_to_window[id]
-        assert coding == "rgb24"
-        window.draw(x, y, width, height, data)
+        window.draw(x, y, width, height, coding, data)
 
     def _process_window_metadata(self, packet):
         (_, id, metadata) = packet
@@ -395,6 +470,8 @@
         self.emit("received-gibberish", data)
 
     _packet_handlers = {
+        "challenge": _process_challenge,
+        "disconnect": _process_disconnect,
         "hello": _process_hello,
         "new-window": _process_new_window,
         "new-override-redirect": _process_new_override_redirect,
@@ -411,7 +488,8 @@
         packet_type = packet[0]
         if (isinstance(packet_type, str)
             and packet_type.startswith("clipboard-")):
-            self._clipboard_helper.process_clipboard_packet(packet)
+            if self._clipboard_helper:
+                self._clipboard_helper.process_clipboard_packet(packet)
         else:
             self._packet_handlers[packet_type](self, packet)
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/darwin/gui.py dev/xpra/darwin/gui.py
--- upstream/xpra/darwin/gui.py	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra/darwin/gui.py	2011-01-19 17:12:33.927348703 +0700
@@ -0,0 +1,67 @@
+# This file is part of Parti.
+# Copyright (C) 2010 Nathaniel Smith <njs@pobox.com>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+# Platform-specific code for Win32 -- the parts that may import gtk.
+
+def grok_modifier_map(display_source):
+    modifier_map = {
+        "shift": 1 << 0,
+        "lock": 1 << 1,
+        "control": 1 << 2,
+        "mod1": 1 << 3,
+        "mod2": 1 << 4,
+        "mod3": 1 << 5,
+        "mod4": 1 << 6,
+        "mod5": 1 << 7,
+        "scroll": 0,
+        "num": 0,
+        "meta": 1 << 3,
+        "super": 0,
+        "hyper": 0,
+        "alt": 0,
+        }
+    modifier_map["nuisance"] = (modifier_map["lock"]
+                                | modifier_map["scroll"]
+                                | modifier_map["num"])
+    return modifier_map
+
+class ClipboardProtocolHelper(object):
+    def __init__(self, send_packet_cb):
+        self.send = send_packet_cb
+
+    def send_all_tokens(self):
+        pass
+
+    def process_clipboard_packet(self, packet):
+        packet_type = packet[0]
+        if packet_type == "clipboard_request":
+            (_, request_id, selection, target) = packet
+            self.send(["clipboard-contents-none", request_id, selection])
+
+class ClientExtras(object):
+    def __init__(self, send_packet_cb, pulseaudio):
+        self.send = send_packet_cb
+        self.setup_macdock()
+
+    def setup_macdock(self):
+        print "setup_macdock()"
+        self.mac_dock = None
+        try:
+            import os
+            import gtk.gdk
+            import igemacintegration		#@UnresolvedImport
+            self.mac_dock = igemacintegration.MacDock()
+            if "XDG_DATA_DIRS" in os.environ:
+                filename = os.path.join(os.environ["XDG_DATA_DIRS"], "icons", "xpra.png")
+                print "setup_macdock() trying to load icon from %s" % filename
+                pixbuf = gtk.gdk.pixbuf_new_from_file(filename)
+                self.mac_dock.set_icon_from_pixbuf(pixbuf)
+            self.mac_dock.connect('quit-activate', gtk.main_quit)
+        except Exception, e:
+            print "failed to create dock: %s" % e
+
+
+    def handshake_complete(self, capabilities):
+        pass
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/darwin/__init__.py dev/xpra/darwin/__init__.py
--- upstream/xpra/darwin/__init__.py	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra/darwin/__init__.py	2010-12-05 02:07:41.391928001 +0700
@@ -0,0 +1,10 @@
+# This file is part of Parti.
+# Copyright (C) 2010 Nathaniel Smith <njs@pobox.com>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+# Platform-specific code for Mac OS X.
+
+XPRA_LOCAL_SERVERS_SUPPORTED = False
+DEFAULT_SSH_CMD = "ssh"
+GOT_PASSWORD_PROMPT_SUGGESTION = "Perhaps you need to set up your ssh agent?\n"
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/dotxpra.py dev/xpra/dotxpra.py
--- upstream/xpra/dotxpra.py	2010-10-04 02:06:27.143618171 +0700
+++ dev/xpra/dotxpra.py	2010-10-04 02:05:00.000000000 +0700
@@ -3,7 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import os
 import os.path
 import glob
 import socket
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/__init__.py dev/xpra/__init__.py
--- upstream/xpra/__init__.py	2010-10-04 02:06:27.141618262 +0700
+++ dev/xpra/__init__.py	2011-03-26 02:30:24.625231721 +0700
@@ -6,6 +6,6 @@
 import pygtk
 pygtk.require('2.0')
 
-__version__ = "0.0.6"
+__version__ = "0.0.7.18"
 import wimpiggy
 assert wimpiggy.__version__ == __version__
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/keys.py dev/xpra/keys.py
--- upstream/xpra/keys.py	2010-10-04 02:06:27.144618177 +0700
+++ dev/xpra/keys.py	2010-10-12 16:16:07.919898379 +0700
@@ -3,8 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-from xpra.platform.gui import grok_modifier_map
-
 def mask_to_names(mask, modifier_map):
     modifiers = []
     for modifier in ["shift", "control",
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/platform/gui.py dev/xpra/platform/gui.py
--- upstream/xpra/platform/gui.py	2010-10-04 02:06:27.145618200 +0700
+++ dev/xpra/platform/gui.py	2010-12-05 02:43:35.949928001 +0700
@@ -6,8 +6,11 @@
 ### NOTE: this must be kept in sync with the version in
 ###    xpra/platform/__init__.py 
 import os as _os
+import sys as _sys
 if _os.name == "nt":
     from xpra.win32.gui import *
+elif _sys.platform.startswith("darwin"):
+    from xpra.darwin.gui import *
 elif _os.name == "posix":
     from xpra.xposix.gui import *
 else:
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/platform/__init__.py dev/xpra/platform/__init__.py
--- upstream/xpra/platform/__init__.py	2010-10-04 02:06:27.145618200 +0700
+++ dev/xpra/platform/__init__.py	2010-12-05 02:08:07.916928001 +0700
@@ -6,8 +6,11 @@
 ### NOTE: this must be kept in sync with the version in
 ###    xpra/platform/gui.py 
 import os as _os
+import sys as _sys
 if _os.name == "nt":
     from xpra.win32 import *
+elif _sys.platform.startswith("darwin"):
+    from xpra.darwin import *
 elif _os.name == "posix":
     from xpra.xposix import *
 else:
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/protocol.py dev/xpra/protocol.py
--- upstream/xpra/protocol.py	2010-10-04 02:06:27.146618164 +0700
+++ dev/xpra/protocol.py	2010-10-13 01:36:54.303949679 +0700
@@ -79,6 +79,7 @@
         self._read_queue = Queue()
         # Invariant: if .source is None, then _source_has_more == False
         self.source = None
+        self.jpegquality = 0
         self._source_has_more = False
         self._closed = False
         self._read_decoder = IncrBDecode()
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/proxy.py dev/xpra/proxy.py
--- upstream/xpra/proxy.py	2010-10-04 02:06:27.146618164 +0700
+++ dev/xpra/proxy.py	2010-10-04 02:05:00.000000000 +0700
@@ -3,8 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import threading
-
 from wimpiggy.log import Logger
 log = Logger()
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/scripts/client_launcher.py dev/xpra/scripts/client_launcher.py
--- upstream/xpra/scripts/client_launcher.py	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra/scripts/client_launcher.py	2011-03-28 21:14:30.706109593 +0700
@@ -0,0 +1,231 @@
+# This file is part of Parti.
+# Copyright (C) 2009-2011 Antoine Martin <antoine@nagafix.co.uk>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+""" client_launcher.py
+
+This is a simple GUI for starting the xpra client.
+
+"""
+
+import sys
+import os.path
+import thread
+import subprocess
+
+import pygtk
+pygtk.require('2.0')
+import gtk
+import pango
+import gobject
+
+import socket
+from xpra.client import XpraClient
+
+
+""" Start of crappy platform workarounds """
+SUBPROCESS_CREATION_FLAGS = 0
+if sys.platform.startswith("win"):
+	try:
+		import win32process
+		SUBPROCESS_CREATION_FLAGS = win32process.CREATE_NO_WINDOW
+	except:
+		pass		#tried our best...
+
+	if getattr(sys, 'frozen', ''):
+		#on win32 we must send stdout to a logfile to prevent an alert box on exit shown by py2exe
+		#UAC in vista onwards will not allow us to write where the software is installed, so place the log file in "~/Application Data"
+		appdata = os.environ.get("APPDATA")
+		if not os.path.exists(appdata):
+			os.mkdir(appdata)
+		log_path = os.path.join(appdata, "Xpra")
+		if not os.path.exists(log_path):
+			os.mkdir(log_path)
+		log_file = os.path.join(log_path, "Xpra.log")
+		sys.stdout = open(log_file, "a")
+		sys.stderr = sys.stdout
+
+
+LOSSLESS = "lossless (best)"
+LOSSY_5 = "lowest quality"
+LOSSY_20 = "low quality"
+LOSSY_50 = "average quality"
+LOSSY_90 = "best lossy quality"
+
+XPRA_COMPRESSION_OPTIONS = [LOSSLESS, LOSSY_5, LOSSY_20, LOSSY_50, LOSSY_90]
+XPRA_COMPRESSION_OPTIONS_DICT = {LOSSLESS : None,
+						LOSSY_5 : 5,
+						LOSSY_20 : 20,
+						LOSSY_50 : 50,
+						LOSSY_90 : 90
+						}
+
+class ApplicationWindow:
+
+	def	__init__(self):
+		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
+		self.window.connect("destroy", self.destroy)
+		self.window.set_default_size(400, 300)
+		self.window.set_border_width(20)
+
+		# Title
+		vbox = gtk.VBox(False, 0)
+		vbox.set_spacing(15)
+		label = gtk.Label("Connect to xpra server")
+		label.modify_font(pango.FontDescription("sans 13"))
+		vbox.pack_start(label)
+		
+		# Mode:
+		hbox = gtk.HBox(False, 20)
+		hbox.set_spacing(20)
+		hbox.pack_start(gtk.Label("Mode: "))
+		self.mode_combo = gtk.combo_box_new_text()
+		self.mode_combo.get_model().clear()
+		for option in ["tcp", "ssh"]:
+			self.mode_combo.append_text(option)
+		self.mode_combo.set_active(0)
+		hbox.pack_start(self.mode_combo)
+		vbox.pack_start(hbox)
+		
+		# JPEG:
+		hbox = gtk.HBox(False, 20)
+		hbox.set_spacing(20)
+		hbox.pack_start(gtk.Label("JPEG Compression: "))
+		self.jpeg_combo = gtk.combo_box_new_text()
+		self.jpeg_combo.get_model().clear()
+		for option in XPRA_COMPRESSION_OPTIONS:
+			self.jpeg_combo.append_text(option)
+		self.jpeg_combo.set_active(0)
+		hbox.pack_start(self.jpeg_combo)
+		vbox.pack_start(hbox)
+
+		# Host:Port		
+		hbox = gtk.HBox(False, 0)
+		hbox.set_spacing(5)
+		self.host_entry = gtk.Entry(max=128)
+		self.host_entry.set_width_chars(40)
+		if len(sys.argv)>1:
+			self.host_entry.set_text(sys.argv[1])
+		else:
+			self.host_entry.set_text("127.0.0.1")
+		self.port_entry = gtk.Entry(max=5)
+		self.port_entry.set_width_chars(5)
+		if len(sys.argv)>2:
+			self.port_entry.set_text(sys.argv[2])
+		else:
+			self.port_entry.set_text("16010")
+		hbox.pack_start(self.host_entry)
+		hbox.pack_start(gtk.Label(":"))
+		hbox.pack_start(self.port_entry)
+		vbox.pack_start(hbox)
+		
+		# Info Label
+		self.info = gtk.Label()
+		self.info.set_line_wrap(True)
+		self.info.set_size_request(360, -1)
+		vbox.pack_start(self.info)
+		
+		# Connect button:
+		self.button = gtk.Button("Connect")
+		self.button.connect("clicked", self.connect_clicked, None)
+		vbox.pack_start(self.button)
+
+		self.window.add(vbox)
+		self.window.show_all()
+	
+	def connect_tcp(self):
+		self.info.set_text("Connecting.")
+		host = self.host_entry.get_text()
+		port = self.port_entry.get_text()
+		self.info.set_text("Connecting..")
+		try:
+			sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+			self.info.set_text("Connecting...")
+			sock.connect((host, int(port)))
+		except Exception, e:
+			self.info.set_text("Socket error: %s" % e)
+			return
+		self.info.set_text("Connection established")
+		try:
+			from xpra.protocol import SocketConnection
+			global socket_wrapper
+			socket_wrapper = SocketConnection(sock)
+		except Exception, e:
+			self.info.set_text("Xpra Client error: %s" % e)
+			return
+		self.window.hide()
+		# launch Xpra client in the same gtk.main():
+		from wimpiggy.util import gtk_main_quit_on_fatal_exceptions_enable
+		gtk_main_quit_on_fatal_exceptions_enable()
+		app = XpraClient(socket_wrapper, 3, 100, None, None, False, False)
+		app.run()
+
+	def launch_xpra(self):
+		""" Launches Xpra in a new process """
+		cmd = "xpra"
+		if sys.platform.startswith("win"):
+			if hasattr(sys, "frozen"):
+				dir = os.path.dirname(sys.executable)
+			dir = os.path.dirname(sys.argv[0])
+			cmd = os.path.join(dir, "xpra.exe")
+			if not os.path.exists(cmd):
+				self.info.set_text("Xpra command not found!")
+				return
+		self.info.set_text("Launching: %s" % cmd)
+		self.window.hide()
+		thread.start_new_thread(self.start_xpra_process, (cmd,))
+		
+	def start_xpra_process(self, cmd):
+		try:
+			self.do_start_xpra_process(cmd)
+		except Exception, e:
+			print("error: %s" % e)
+			self.info.set_text("Error launching %s: %s" % (cmd, e))
+
+	def do_start_xpra_process(self, cmd):
+		#ret = os.system(" ".join(args))
+		mode = self.mode_combo.get_active_text()
+		host = self.host_entry.get_text()
+		port = self.port_entry.get_text()
+		jpeg = self.jpeg_combo.get_active_text()
+		uri = "%s:%s:%s" % (mode, host, port)
+		args = [cmd, "attach", uri]
+		print("jpeg=%s" % jpeg)
+		if jpeg:
+			jpeg_v = XPRA_COMPRESSION_OPTIONS_DICT.get(jpeg)
+			if jpeg_v:
+				args.append("--jpeg-quality=%s" % jpeg_v)
+		process = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False, creationflags=SUBPROCESS_CREATION_FLAGS)
+		(out,err) = process.communicate()
+		print("do_start_xpra_process(%s) command terminated" % str(cmd))
+		print("stdout=%s" % out)
+		print("stderr=%s" % err)
+		ret = process.wait()
+		def show_result(out, err):
+			if len(out)>255:
+				out = "..."+out[len(out)-255:]
+			if len(err)>255:
+				err = "..."+err[len(err)-255:]
+			self.info.set_text("command:\n%s\nterminated with status %s,\noutput:\n%s\nerror:\n%s" % (args, ret, out, err))
+			self.window.show_all()
+		gobject.idle_add(show_result, out, err)
+
+	def connect_clicked(self, *args):
+		mode = self.mode_combo.get_active_text()
+		if mode=="tcp" and not sys.platform.startswith("win"):
+			""" Use built-in connector (faster and gives feedback) - does not work on win32... (dunno why) """
+			self.connect_tcp()
+		else:
+			self.launch_xpra()
+
+	def destroy(self, *args):
+		gtk.main_quit()
+
+def main():
+	ApplicationWindow()
+	gtk.main()
+
+if __name__ == "__main__":
+	main()
+	sys.exit(0)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/scripts/main.py dev/xpra/scripts/main.py
--- upstream/xpra/scripts/main.py	2010-10-04 02:06:27.148618193 +0700
+++ dev/xpra/scripts/main.py	2011-03-28 20:38:48.666057237 +0700
@@ -3,7 +3,6 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import gobject
 import sys
 import os
 import socket
@@ -37,21 +36,24 @@
     ##
     ## NOTE NOTE NOTE
     #################################################################
+    attach_str = "\t%prog attach [DISPLAY]\n"
     if XPRA_LOCAL_SERVERS_SUPPORTED:
         start_str = "\t%prog start DISPLAY\n"
         list_str = "\t%prog list\n"
         upgrade_str = "\t%prog upgrade DISPLAY"
         note_str = ""
+        stop_str = "\t%prog stop [DISPLAY]\n"
     else:
         start_str = ""
         list_str = ""
         upgrade_str = ""
         note_str = "(This xpra install does not support starting local servers.)"
+        stop_str = ""
     parser = OptionParser(version="xpra v%s" % xpra.__version__,
                           usage="".join(["\n",
                                          start_str,
-                                         "\t%prog attach [DISPLAY]\n",
-                                         "\t%prog stop [DISPLAY]\n",
+                                         attach_str,
+                                         stop_str,
                                          list_str,
                                          upgrade_str,
                                          note_str]))
@@ -72,6 +74,22 @@
                           dest="bind_tcp", default=None,
                           metavar="[HOST]:PORT",
                           help="Listen for connections over TCP (insecure)")
+    parser.add_option("--no-clipboard", action="store_false",
+					  dest="clipboard", default=True,
+					  help="Disable clipboard support")
+    parser.add_option("--no-pulseaudio", action="store_false",
+                      dest="pulseaudio", default=True,
+                      help="Disable pulseaudio support via X11 root window properties")
+    parser.add_option("--password-file", action="store",
+                      dest="password_file", default=None,
+                      help="The file containing the password required to connect (useful to secure TCP mode)")
+    parser.add_option("--title-suffix", action="store",
+                      dest="title_suffix", default=" (via xpra)",
+                      help="Text which is appended to the window's title")
+    parser.add_option("--jpeg-quality", action="store",
+                      metavar="LEVEL",
+                      dest="jpegquality", type="int", default="0",
+                      help="Use jpeg compression with given quality (1-100), 0 disables jpeg compression. Default: disabled.")
     parser.add_option("-z", "--compress", action="store",
                       dest="compression_level", type="int", default=3,
                       metavar="LEVEL",
@@ -117,7 +135,7 @@
             run_client(parser, options, args)
         except KeyboardInterrupt:
             sys.stdout.write("Exiting on keyboard interrupt\n")
-    elif mode == "stop":
+    elif mode == "stop" and XPRA_LOCAL_SERVERS_SUPPORTED:
         nox()
         run_stop(parser, options, args)
     elif mode == "list" and XPRA_LOCAL_SERVERS_SUPPORTED:
@@ -239,7 +257,9 @@
     conn = connect_or_fail(pick_display(parser, opts, extra_args))
     if opts.compression_level < 0 or opts.compression_level > 9:
         parser.error("Compression level must be between 0 and 9 inclusive.")
-    app = XpraClient(conn, opts.compression_level)
+    if opts.jpegquality < 0 or opts.jpegquality > 100:
+        parser.error("Jpeg quality must be between 0 and 100 inclusive.")
+    app = XpraClient(conn, opts.compression_level, opts.jpegquality, opts.title_suffix, opts.password_file, opts.pulseaudio, opts.clipboard)
     app.connect("handshake-complete", handshake_complete_msg)
     app.connect("received-gibberish", got_gibberish_msg)
     app.run()
@@ -253,7 +273,7 @@
 
 def run_stop(parser, opts, extra_args):
     assert "gtk" not in sys.modules
-    magic_string = bencode(["hello", []]) + bencode(["shutdown-server"])
+    magic_string = bencode(["hello", {"__prerelease_version": xpra.__version__}]) + bencode(["shutdown-server"])
 
     display_desc = pick_display(parser, opts, extra_args)
     conn = connect_or_fail(display_desc)
@@ -263,7 +283,7 @@
         pass
     if display_desc["local"]:
         sockdir = DotXpra()
-        for i in xrange(6):
+        for _ in xrange(6):
             final_state = sockdir.server_state(display_desc["display"])
             if final_state is DotXpra.LIVE:
                 time.sleep(0.5)
@@ -304,3 +324,6 @@
                 else:
                     sys.stdout.write(" (cleaned up)")
             sys.stdout.write("\n")
+
+if __name__ == "__main__":
+    main("xpra.exe", sys.argv)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/scripts/server.py dev/xpra/scripts/server.py
--- upstream/xpra/scripts/server.py	2010-10-04 02:06:27.149618151 +0700
+++ dev/xpra/scripts/server.py	2011-03-26 01:36:24.086881749 +0700
@@ -10,7 +10,6 @@
 import gobject
 import subprocess
 import sys
-import os
 import os.path
 import atexit
 import signal
@@ -63,7 +62,7 @@
     def __call__(self, signum, frame):
         while 1:
             try:
-                pid, status = os.waitpid(-1, os.WNOHANG)
+                pid, _ = os.waitpid(-1, os.WNOHANG)
             except OSError:
                 break
             if pid == 0:
@@ -303,7 +302,7 @@
 
     # This import is delayed because the module depends on gtk:
     import xpra.server
-    app = xpra.server.XpraServer(upgrading, sockets)
+    app = xpra.server.XpraServer(upgrading, sockets, opts.password_file, opts.pulseaudio, opts.clipboard)
     def cleanup_socket(self):
         print "removing socket"
         try:
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/server.py dev/xpra/server.py
--- upstream/xpra/server.py	2010-10-04 02:06:27.150618254 +0700
+++ dev/xpra/server.py	2011-03-26 01:37:21.197185126 +0700
@@ -14,6 +14,10 @@
 import cairo
 import sys
 import subprocess
+import hmac
+import uuid
+import Image
+import StringIO
 
 from wimpiggy.wm import Wm
 from wimpiggy.util import (AdHocStruct,
@@ -29,7 +33,7 @@
 from wimpiggy.prop import prop_set
 from wimpiggy.window import OverrideRedirectWindowModel, Unmanageable
 from wimpiggy.keys import grok_modifier_map
-from wimpiggy.error import *
+from wimpiggy.error import XError, trap
 
 from wimpiggy.log import Logger
 log = Logger()
@@ -106,7 +110,7 @@
         self._models[model].window = window
 
     def window_size(self, model):
-        (x, y, w, h) = self._models[model].geom
+        (_, _, w, h) = self._models[model].geom
         return (w, h)
 
     def window_position(self, model, w, h):
@@ -131,6 +135,11 @@
     def _have_more(self):
         return bool(self._ordinary_packets) or bool(self._damage)
 
+    def send_packet_now(self, packet):
+        assert self._protocol
+        self._ordinary_packets.insert(0, packet)
+        self._protocol.source_has_more()
+
     def queue_ordinary_packet(self, packet):
         assert self._protocol
         self._ordinary_packets.append(packet)
@@ -165,17 +174,18 @@
                 log.error("wtf, pixmap is None?")
                 packet = None
             else:
-                (x2, y2, w2, h2, data) = self._get_rgb_data(pixmap, x, y, w, h)
+                (x2, y2, w2, h2, coding, data) = self._get_rgb_data(pixmap, x, y, w, h)
                 if not w2 or not h2:
                     packet = None
                 else:
-                    packet = ["draw", id, x2, y2, w2, h2, "rgb24", data]
+                    packet = ["draw", id, x2, y2, w2, h2, coding, data]
         else:
             packet = None
         return packet, self._have_more()
 
     def _get_rgb_data(self, pixmap, x, y, width, height):
         pixmap_w, pixmap_h = pixmap.get_size()
+        coding = "rgb24"
         # Just in case we somehow end up with damage larger than the pixmap,
         # we don't want to start requesting random chunks of memory (this
         # could happen if a window is resized but we don't throw away our
@@ -187,7 +197,7 @@
         if y + height > pixmap_h:
             height = pixmap_h - y
         if width <= 0 or height <= 0:
-            return (0, 0, 0, 0, "")
+            return (0, 0, 0, 0, coding, "")
         pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)
         pixbuf.get_from_drawable(pixmap, pixmap.get_colormap(),
                                  x, y, 0, 0, width, height)
@@ -201,14 +211,26 @@
             for i in xrange(height):
                 rows.append(raw_data[i*rowstride : i*rowstride+rowwidth])
             data = "".join(rows)
-        return (x, y, width, height, data)
+
+        # should probably have some other conditions for
+        # enabling jpeg compression (for example len(data) > N and/or
+        # width*height > M)
+        if self._protocol.jpegquality > 0:
+            im = Image.fromstring("RGB", (width,height), data)
+            buf=StringIO.StringIO()
+            im.save(buf,"JPEG", quality=self._protocol.jpegquality)
+            data=buf.getvalue()
+            buf.close()
+            coding = "jpeg"
+
+        return (x, y, width, height, coding, data)
 
 class XpraServer(gobject.GObject):
     __gsignals__ = {
         "wimpiggy-child-map-event": one_arg_signal,
         }
 
-    def __init__(self, clobber, sockets):
+    def __init__(self, clobber, sockets, password_file, pulseaudio, clipboard):
         gobject.GObject.__init__(self)
         
         # Do this before creating the Wm object, to avoid clobbering its
@@ -287,7 +309,10 @@
             }
 
         ### Clipboard handling:
-        self._clipboard_helper = ClipboardProtocolHelper(self._send)
+        if clipboard:
+            self._clipboard_helper = ClipboardProtocolHelper(self._send)
+        else:
+            self._clipboard_helper = None
 
         ### Misc. state:
         self._settings = {}
@@ -295,6 +320,11 @@
         self._has_focus = 0
         self._upgrading = False
 
+        self.password_file = password_file
+        self.salt = None
+        
+        self.pulseaudio = pulseaudio
+
         ### All right, we're ready to accept customers:
         for sock in sockets:
             self.add_listen_socket(sock)
@@ -305,16 +335,21 @@
 
     def quit(self, upgrading):
         self._upgrading = upgrading
+        log.info("\nxpra is terminating.")
         gtk_main_quit_really()
 
     def run(self):
         gtk_main_quit_on_fatal_exceptions_enable()
+        def print_ready():
+            log.info("\nxpra is ready.")
+        gobject.idle_add(print_ready)
         gtk.main()
+        log.info("\nxpra end of gtk.main().")
         return self._upgrading
 
     def _new_connection(self, listener, *args):
         log.info("New connection received")
-        sock, addr = listener.accept()
+        sock, _ = listener.accept()
         self._potential_protocols.append(Protocol(SocketConnection(sock),
                                                   self.process_packet))
         return True
@@ -345,7 +380,7 @@
         self._add_new_window_common(window)
         for prop in self._window_export_properties:
             window.connect("notify::%s" % prop, self._update_metadata)
-        (x, y, w, h, depth) = window.get_property("client-window").get_geometry()
+        (x, y, w, h, _) = window.get_property("client-window").get_geometry()
         self._desktop_manager.add_window(window, x, y, w, h)
         self._send_new_window_packet(window)
 
@@ -502,7 +537,7 @@
 
     def _calculate_capabilities(self, client_capabilities):
         capabilities = {}
-        for cap in ("deflate", "__prerelease_version"):
+        for cap in ("deflate", "__prerelease_version", "challenge_response", "jpeg"):
             if cap in client_capabilities:
                 capabilities[cap] = client_capabilities[cap]
         if "desktop_size" in client_capabilities:
@@ -512,24 +547,73 @@
                                             min(client_h, root_h)]
         return capabilities
 
+    def version_no_minor(self, version):
+        if not version:
+            return    version
+        p = version.rfind(".")
+        if p>0:
+            return version[:p]
+        else:
+            return version
+
     def _process_hello(self, proto, packet):
         (_, client_capabilities) = packet
         log.info("Handshake complete; enabling connection")
         capabilities = self._calculate_capabilities(client_capabilities)
-        if capabilities.get("__prerelease_version") != xpra.__version__:
+        remote_version = capabilities.get("__prerelease_version")
+        if self.version_no_minor(remote_version) != self.version_no_minor(xpra.__version__):
             log.error("Sorry, this pre-release server only works with clients "
-                      + "of exactly the same version (v%s)", xpra.__version__)
+                      + "of the same major version (v%s), but this client is using v%s", xpra.__version__, remote_version)
             proto.close()
             return
+        if self.password_file:
+            log.debug("password auth required")
+            client_hash = capabilities.get("challenge_response")
+            if not client_hash or not self.salt:
+                self.salt = "%s" % uuid.uuid4()
+                capabilities["challenge"] = self.salt
+                log.info("Password required, sending challenge: %s" % str(capabilities))
+                packet = ("challenge", self.salt)
+                socket = proto._conn._s
+                log.info("proto=%s, conn=%s, socket=%s" % (repr(proto), repr(proto._conn), socket))
+                from xpra.bencode import bencode
+                import select
+                data = bencode(packet)
+                written = 0
+                while written < len(data):
+                    select.select([], [socket], [])
+                    written += socket.send(data[written:])
+                return
+            passwordFile = open(self.password_file, "rU")
+            password  = passwordFile.read()
+            hash = hmac.HMAC(password, self.salt)
+            if client_hash != hash.hexdigest():
+                log.error("Password supplied does not match! dropping the connection.")
+                def login_failed(*args):
+                    proto.close()
+                gobject.timeout_add(1000, login_failed, proto)
+                return
+            else:
+                log.info("Password matches!")
+                del capabilities["challenge_response"]
+                self.salt = None            #prevent replay attacks
         # Okay, things are okay, so let's boot out any existing connection and
         # set this as our new one:
         if self._protocol is not None:
-            self._protocol.close()
+            log.info("Disconnecting existing client")
+            # send message asking for disconnection politely:
+            self._protocol.source.send_packet_now(["disconnect", "new valid connection received"])
+            def force_disconnect(protocol):
+                protocol.close()
+            #give 5 seconds for the write buffer to flush then we force disconnect it:
+            gobject.timeout_add(5000, force_disconnect, self._protocol)
         self._protocol = proto
         ServerSource(self._protocol)
         self._send(["hello", capabilities])
         if "deflate" in capabilities:
             self._protocol.enable_deflate(capabilities["deflate"])
+        if "jpeg" in capabilities:
+            self._protocol.jpegquality = capabilities["jpeg"]
         # We send the new-window packets sorted by id because this sorts them
         # from oldest to newest -- and preserving window creation order means
         # that the earliest override-redirect windows will be on the bottom,
@@ -556,12 +640,13 @@
                     self._xsettings_manager = XSettingsManager(v)
                 elif k == "resource-manager":
                     root_set("RESOURCE_MANAGER")
-                elif k == "pulse-cookie":
-                    root_set("PULSE_COOKIE")
-                elif k == "pulse-id":
-                    root_set("PULSE_ID")
-                elif k == "pulse-server":
-                    root_set("PULSE_SERVER")
+                elif self.pulseaudio:
+                    if k == "pulse-cookie":
+                        root_set("PULSE_COOKIE")
+                    elif k == "pulse-id":
+                        root_set("PULSE_ID")
+                    elif k == "pulse-server":
+                        root_set("PULSE_SERVER")
 
     def _process_map_window(self, proto, packet):
         (_, id, x, y, width, height) = packet
@@ -642,6 +727,7 @@
         if proto in self._potential_protocols:
             self._potential_protocols.remove(proto)
         if proto is self._protocol:
+            log.info("xpra client disconnected.")
             self._protocol = None
 
     def _process_gibberish(self, proto, packet):
@@ -670,7 +756,8 @@
         packet_type = packet[0]
         if (isinstance(packet_type, str)
             and packet_type.startswith("clipboard-")):
-            self._clipboard_helper.process_clipboard_packet(packet)
+            if self._clipboard_helper:
+                self._clipboard_helper.process_clipboard_packet(packet)
         else:
             self._packet_handlers[packet_type](self, proto, packet)
 
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/win32/gui.py dev/xpra/win32/gui.py
--- upstream/xpra/win32/gui.py	2010-10-04 02:06:27.152618310 +0700
+++ dev/xpra/win32/gui.py	2011-01-20 04:37:22.250428530 +0700
@@ -41,7 +41,7 @@
             self.send(["clipboard-contents-none", request_id, selection])
 
 class ClientExtras(object):
-    def __init__(self, send_packet_cb):
+    def __init__(self, send_packet_cb, pulseaudio):
         self.send = send_packet_cb
 
     def handshake_complete(self, capabilities):
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/xposix/gui.py dev/xpra/xposix/gui.py
--- upstream/xpra/xposix/gui.py	2010-10-04 02:06:27.153618155 +0700
+++ dev/xpra/xposix/gui.py	2011-01-19 17:12:13.631353859 +0700
@@ -7,14 +7,22 @@
 # may import gtk.
 
 from wimpiggy.keys import grok_modifier_map
-
+assert grok_modifier_map		#make pydev happy: this import is needed as it is part of the gui "interface"
 from xpra.xposix.xclipboard import ClipboardProtocolHelper
-
+assert ClipboardProtocolHelper	#make pydev happy: this import is needed as it is part of the gui "interface"
 from xpra.xposix.xsettings import XSettingsWatcher
 from xpra.xposix.xroot_props import XRootPropWatcher
+
 class ClientExtras(object):
-    def __init__(self, send_packet_cb):
+    def __init__(self, send_packet_cb, pulseaudio):
         self.send = send_packet_cb
+        self.ROOT_PROPS = {
+            "RESOURCE_MANAGER": "resource-manager"
+            }
+        if pulseaudio:
+            self.ROOT_PROPS["PULSE_COOKIE"] = "pulse-cookie"
+            self.ROOT_PROPS["PULSE_ID"] = "pulse-id"
+            self.ROOT_PROPS["PULSE_SERVER"] = "pulse-server"
 
     def handshake_complete(self, capabilities):
         self._xsettings_watcher = XSettingsWatcher()
@@ -31,13 +39,6 @@
         if blob is not None:
             self.send(["server-settings", {"xsettings-blob": blob}])
 
-    ROOT_PROPS = {
-        "RESOURCE_MANAGER": "resource-manager",
-        "PULSE_COOKIE": "pulse-cookie",
-        "PULSE_ID": "pulse-id",
-        "PULSE_SERVER": "pulse-server",
-        }
-    
     def _handle_root_prop_changed(self, obj, prop, value):
         assert prop in self.ROOT_PROPS
         if value is not None:
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/xposix/__init__.py dev/xpra/xposix/__init__.py
--- upstream/xpra/xposix/__init__.py	2010-10-04 02:06:27.152618310 +0700
+++ dev/xpra/xposix/__init__.py	2010-11-20 23:18:07.153231001 +0700
@@ -5,6 +5,7 @@
 
 # Platform-specific code for Posix systems with X11 display.
 
-XPRA_LOCAL_SERVERS_SUPPORTED = True
+import sys
+XPRA_LOCAL_SERVERS_SUPPORTED = not sys.platform.startswith("darwin")
 DEFAULT_SSH_CMD = "ssh"
 GOT_PASSWORD_PROMPT_SUGGESTION = "Perhaps you need to set up your ssh agent?\n"
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/xposix/xclipboard.py dev/xpra/xposix/xclipboard.py
--- upstream/xpra/xposix/xclipboard.py	2010-10-04 02:06:27.154618149 +0700
+++ dev/xpra/xposix/xclipboard.py	2011-01-20 04:14:01.886364146 +0700
@@ -9,7 +9,7 @@
 
 from wimpiggy.util import n_arg_signal
 from wimpiggy.prop import prop_get
-from wimpiggy.error import *
+from wimpiggy.error import trap
 from wimpiggy.lowlevel import (get_xatom, get_pywindow,
                                gdk_atom_objects_from_gdk_atom_array)
 
@@ -127,7 +127,7 @@
                         self.send(["clipboard-contents", request_id, selection,
                                    type, format, wire_encoding, wire_data])
                         return
-                self.send(["clipboard-contents-none", request-id, selection])
+                self.send(["clipboard-contents-none", request_id, selection])
             proxy.get_contents(target, got_contents)
         else:
             self.send(["clipboard-contents-none", request_id, selection])
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/xposix/xsettings.py dev/xpra/xposix/xsettings.py
--- upstream/xpra/xposix/xsettings.py	2010-10-04 02:06:27.154618149 +0700
+++ dev/xpra/xposix/xsettings.py	2010-10-04 02:05:00.000000000 +0700
@@ -5,7 +5,7 @@
 from wimpiggy.selection import ManagerSelection
 from wimpiggy.prop import prop_set, prop_get
 from wimpiggy.lowlevel import (myGetSelectionOwner, const, get_pywindow,
-                               add_event_receiver, remove_event_receiver,
+                               add_event_receiver,
                                get_xatom)
 from wimpiggy.log import Logger
 log = Logger()
@@ -84,7 +84,7 @@
         log("Fetching current XSettings data")
         try:
             return trap.call(self._get_settings_blob)
-        except XError, e:
+        except XError, _:
             log("X error while fetching XSettings data; ignored")
             return None
         
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra/xpra.wait_for_x_server.pyx dev/xpra/xpra.wait_for_x_server.pyx
--- upstream/xpra/xpra.wait_for_x_server.pyx	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra/xpra.wait_for_x_server.pyx	2010-10-04 02:05:00.000000000 +0700
@@ -0,0 +1,34 @@
+# This file is part of Parti.
+# Copyright (C) 2008 Nathaniel Smith <njs@pobox.com>
+# Parti is released under the terms of the GNU GPL v2, or, at your option, any
+# later version. See the file COPYING for details.
+
+# Special guard to work around Fedora/RH's pygtk2 silliness
+# see http://partiwm.org/ticket/34 for details
+
+import time
+
+cdef extern from "Python.h":
+    char * PyString_AsString(object string) except NULL
+
+cdef extern from "X11/Xlib.h":
+    ctypedef struct Display:
+        pass
+    Display * XOpenDisplay(char * name)
+    int XCloseDisplay(Display * xdisplay)
+
+# timeout is in seconds
+def wait_for_x_server(display_name, timeout):
+    cdef Display * d
+    start = time.time()
+    first_time = True
+    while first_time or (time.time() - start) < timeout:
+        if not first_time:
+            time.sleep(0.2)
+        first_time = False
+        d = XOpenDisplay(PyString_AsString(display_name))
+        if d is not NULL:
+            XCloseDisplay(d)
+            return
+    raise RuntimeError("could not connect to X server after %s seconds"
+                       % timeout)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra.1 dev/xpra.1
--- upstream/xpra.1	2010-10-04 02:06:27.141618262 +0700
+++ dev/xpra.1	2011-03-28 21:12:28.890247642 +0700
@@ -1,6 +1,7 @@
 .\" Man page for xpra
 .\"
 .\" Copyright (C) 2008-2009 Nathaniel Smith <njs@pobox.com>
+.\" Copyright (C) 2010-2011 Antoine Martin <antoine@devloop.org.uk>
 .\"
 .\" You may distribute under the terms of the GNU General Public
 .\" license, either version 2 or (at your option) any later version.
@@ -17,11 +18,18 @@
 [\fB\-\-start\-child=CHILD\fP]\fB .\|.\|.\fP
 [\fB\-\-exit\-with\-children\fP] [\fB\-\-no\-daemon\fP]
 [\fB\-\-xvfb=CMD\fP]
-[\fB\-\-bind\-tcp=[HOST]:PORT\fP] 
+[\fB\-\-no\-clipboard\fP]
+[\fB\-\-no\-pulseaudio\fP] 
+[\fB\-\-bind\-tcp=\[HOST\]:PORT\fP]
+[\fB\-\-password\-file=filename\fP]
+[\fB\-\-jpeg\-quality=VALUE\fP]\fB
+[\fB\-\-title\-suffix=VALUE\fP]\fB
 .HP
 \fBxpra\fP \fBattach\fP
 [\fI:DISPLAY\fP | \fIssh:HOST:DISPLAY\fP | \fItcp:HOST:PORT\fP]
 [\fB\-zLEVEL | \-\-compress=LEVEL\fP]
+[\fB\-\-no\-clipboard\fP]
+[\fB\-\-no\-pulseaudio\fP] 
 [\fB\-\-ssh=CMD\fP] [\fB\-\-remote\-xpra=CMD\fP]
 .HP
 \fBxpra\fP \fBstop\fP [\fI:DISPLAY\fP | \fIssh:HOST:DISPLAY\fP |
@@ -150,6 +158,12 @@
 against an older version of xpra with a newer version, without having
 to restart your session.  Any currently-running \fBxpra attach\fP
 command will exit and need to be restarted.
+
+.SS Important Note
+Some platforms and package managers may choose to only build the client
+and not the server. In this case, only the \fBattach\fP subcommand will
+be available.
+
 .\" --------------------------------------------------------------------
 .SH OPTIONS
 .SS General options
@@ -197,6 +211,22 @@
 this switch allows you to specify how to run your preferred X server
 executable.
 .TP
+\fB\-\-no\-clipboard\fP
+Disables clipboard synchronization.
+If used on the server, no clients will be able to use clipboard
+synchronization at all. If used on the client, only this particular
+connection will ignore clipboard data from the server.
+.TP
+\fB\-\-no\-pulseaudio\fP
+Disables pulseaudio information echange.
+If used on the server, no clients will be able to set the pulseaudio
+cookies seen by the application running within xpra.
+If used on the client, only this particular connection will avoid
+sending pulseaudio cookies and information to the server.
+
+Note: what the application does with this information is beyond the
+scope of this document.
+.TP
 \fB\-\-bind\-tcp=\fP\fI[HOST]:PORT\fP
 The xpra server always listens for connections on a local Unix domain
 socket, and supports local connections with the \fB:7\fP-style display
@@ -207,12 +237,17 @@
 used. If you wish to accept connections on all interfaces, pass
 0.0.0.0 for the host portion.
 
-Using this switch is NOT RECOMMENDED, and is a major security risk
-(especially when passing 0.0.0.0)!  Xpra does not do any checking on
-incoming connections; anyone at all may connect to this port and
-access your xpra desktop. Use it only if you have special needs (e.g.,
-certain virtualization environments), and understand the consequences
-of your actions.
+Using this switch without using the password option is not recommended,
+and is a major security risk (especially when passing 0.0.0.0)!
+Anyone at all may connect to this port and access your session.
+Use it only if you have special needs (e.g., certain virtualization
+environments), and understand the consequences of your actions.
+\fB\-\-password\-file\fP\fIFILENAME\fP
+This allows sessions to be secured with a password stored in a text
+file. You should use this if you use the \fB\-\-bind-\-tcp\fP option.
+If this is used on the server, it will reject any client connections
+that do not provide the same password value.
+.TP
 .SS Options for attach, stop
 .TP
 \fB-z\fP\fILEVEL\fP, \fB\-\-compress=\fP\fILEVEL\fP
@@ -226,6 +261,18 @@
 can easily become the bottleneck on xpra's speed, and \fB\-z0\fP is
 therefore recommended.
 .TP
+\fB\-\-jpeg\-quality=\fP\fIVALUE\fP
+This option enables JPEG compression of pixel data sent by the server.
+The valid values range from 0 (lowest quality, high compression -
+generally unusable) to 100 (highest quality, low compression - not
+particularly useful). This option is only really useful for graphical
+applications.
+.TP
+\fB\-\-title\-suffix=\fP\fIVALUE\fP
+Sets the portion of text which is appended to the windows' title.
+If unset, the default value is to use the 'on XXX', where XXX is the
+server's hostname.
+.TP
 \fB\-\-ssh=\fP\fICMD\fP
 When you use an \fBssh:\fP address to connect to a remote display,
 xpra runs \fBssh\fP(1) to make the underlying connection. By default,
@@ -315,3 +362,4 @@
 .\" --------------------------------------------------------------------
 .SH SEE ALSO
 \fBscreen\fP(1)
+\fBwinswitch_applet\fP(1)
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra.dsc dev/xpra.dsc
--- upstream/xpra.dsc	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra.dsc	2011-03-26 02:11:59.624944356 +0700
@@ -0,0 +1,10 @@
+Package: xpra
+Version: 0.0.7.18
+Section: x11
+Priority: optional
+Essential: no
+Depends: x11-common, python, python-gtk2, xvfb, libxtst6, x11-xserver-utils, libgl1-mesa-dri, python-imaging
+Maintainer: Antoine Martin [antoine@nagafix.co.uk]
+Provides: xpra
+Description: screen for X sessions
+Homepage: http://partiwm.org/wiki/xpra
Binary files upstream/xpra.ico and dev/xpra.ico differ
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra.iss dev/xpra.iss
--- upstream/xpra.iss	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra.iss	2011-03-28 20:50:22.123209231 +0700
@@ -0,0 +1,28 @@
+[Setup]
+AppName=Xpra
+AppVerName=Xpra 0.0.7.18
+AppPublisher=devloop
+AppPublisherURL=http://xpra.devloop.org.uk/
+DefaultDirName={pf}\Xpra
+DefaultGroupName=Xpra
+DisableProgramGroupPage=true
+OutputBaseFilename=setup
+Compression=lzma
+SolidCompression=true
+AllowUNCPath=false
+VersionInfoVersion=0.0.7.18
+VersionInfoCompany=devloop
+VersionInfoDescription=screen for X
+
+[Dirs]
+Name: {app}; Flags: uninsalwaysuninstall;
+
+[Files]
+Source: dist\*; DestDir: {app}; Flags: ignoreversion recursesubdirs createallsubdirs
+
+[Icons]
+Name: {group}\Xpra; Filename: {app}\Xpra-Launcher.exe; WorkingDir: {app}
+Name: "{group}\Xpra Homepage"; Filename: "{app}\website.url"
+
+[Run]
+Filename: {app}\Xpra-Launcher.exe; Description: {cm:LaunchProgram,xpra}; Flags: nowait postinstall skipifsilent
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/xpra.spec dev/xpra.spec
--- upstream/xpra.spec	1970-01-01 07:00:00.000000000 +0700
+++ dev/xpra.spec	2011-03-28 21:04:39.145890121 +0700
@@ -0,0 +1,93 @@
+#
+# rpm spec for xpra
+#
+%define version 0.0.7.18
+%{!?python_sitelib: %define python_sitelib %(%{__python} -c "from distutils.sysconfig import get_python_lib; print get_python_lib()")}
+
+
+Summary: Xpra gives you "persistent remote applications" for X.
+Vendor: http://code.google.com/p/partiwm/wiki/xpra
+Name: xpra
+Version: %{version}
+Release: 1
+License: GPL
+Requires: pygtk2, xorg-x11-server-utils, xorg-x11-server-Xvfb
+Group: Networking
+Packager: Antoine Martin <antoine@nagafix.co.uk>
+URL: http://xpra.devloop.org.uk/
+Source: parti-all-%{version}.tar.gz
+BuildRoot: %{_tmppath}/%{name}-%{version}-root
+%if %{defined fedora}
+BuildRequires: python, setuptool, Pyrex
+%endif
+
+%description
+Xpra gives you "persistent remote applications" for X. That is, unlike normal X applications, applications run with xpra are "persistent" -- you can run them remotely, and they don't die if your connection does. You can detach them, and reattach them later -- even from another computer -- with no loss of state. And unlike VNC or RDP, xpra is for remote applications, not remote desktops -- individual applications show up as individual windows on your screen, managed by your window manager. They're not trapped in a box.
+
+So basically it's screen for remote X apps.
+
+
+%changelog
+* Sat Mar 28 2011 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.18-1
+- Fix jpeg compression on MS Windows
+- Add ability to disable clipboard code
+- Updated man page
+
+* Wed Jan 19 2011 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.17-1
+- Honour the pulseaudio flag on client
+
+* Thu Aug 25 2010 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.16-1
+- Merged upstream changes.
+
+* Thu Jul 01 2010 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.15-1
+- Add option to disable Pulseaudio forwarding as this can be a real network hog.
+- Use logging rather than print statements.
+
+* Mon May 04 2010 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.13-1
+- Ignore minor version differences in the future (must bump to 0.0.8 to cause incompatibility error)
+
+* Tue Apr 13 2010 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.12-1
+- bump screen resolution
+
+* Sun Jan 11 2010 Antoine Martin <antoine@nagafix.co.uk> 0.0.7.11-1
+- first rpm spec file
+
+%prep
+rm -rf $RPM_BUILD_DIR/parti-all-%{version}
+zcat $RPM_SOURCE_DIR/parti-all-%{version}.tar.gz | tar -xvf -
+
+%build
+cd parti-all-%{version}
+./do-rpm-build
+ 
+%install
+rm -rf $RPM_BUILD_ROOT
+cd parti-all-%{version}
+%{__python} setup.py install -O1  --prefix /usr --skip-build --root %{buildroot}
+%ifarch x86_64
+mv -f "${RPM_BUILD_ROOT}/usr/lib64" "${RPM_BUILD_ROOT}/usr/lib"
+%endif
+%if %{undefined fedora}
+# remove .so (not suitable for a generic RPM)
+rm -f "${RPM_BUILD_ROOT}/usr/lib/python2.6/site-packages/wimpiggy/bindings.so"
+rm -f "${RPM_BUILD_ROOT}/usr/lib/python2.6/site-packages/xpra/wait_for_x_server.so"
+%endif
+
+%clean
+rm -rf $RPM_BUILD_ROOT
+
+%files
+%defattr(-,root,root)
+%{_bindir}/parti
+%{_bindir}/parti-repl
+%{_bindir}/xpra
+%{python_sitelib}/xpra
+%{python_sitelib}/parti
+%{python_sitelib}/wimpiggy
+%{python_sitelib}/parti_all-*.egg-info
+/usr/share/man/man1/xpra.1*
+
+
+###
+### eof
+###
diff -urN -x COPYING.xpra -x .hg -x .hgignore -x .hgtags -x .svn -x bindings.c -x wait_for_x_server.c upstream/yatest.py dev/yatest.py
--- upstream/yatest.py	2010-10-04 02:06:27.157618256 +0700
+++ dev/yatest.py	2010-10-04 02:04:50.000000000 +0700
@@ -41,7 +41,6 @@
 #      they are defined, not where they have been imported?
 
 import sys
-import os
 import os.path
 import traceback
 import signal
