Index: xpra/server.py
===================================================================
--- xpra/server.py	(revision 304)
+++ xpra/server.py	(revision 308)
@@ -135,6 +135,11 @@
     def _have_more(self):
         return bool(self._ordinary_packets) or bool(self._damage)
 
+    def send_packet_now(self, packet):
+        assert self._protocol
+        self._ordinary_packets.insert(0, packet)
+        self._protocol.source_has_more()
+
     def queue_ordinary_packet(self, packet):
         assert self._protocol
         self._ordinary_packets.append(packet)
@@ -592,7 +597,13 @@
         # Okay, things are okay, so let's boot out any existing connection and
         # set this as our new one:
         if self._protocol is not None:
-            self._protocol.close()
+            log.info("Disconnecting existing client")
+            # send message asking for disconnection politely:
+            self._protocol.source.send_packet_now(["disconnect", "new valid connection received"])
+            def force_disconnect(protocol):
+                protocol.close()
+            #give 5 seconds for the write buffer to flush then we force disconnect it:
+            gobject.timeout_add(5000, force_disconnect, self._protocol)
         self._protocol = proto
         ServerSource(self._protocol)
         self._send(["hello", capabilities])
Index: xpra/client.py
===================================================================
--- xpra/client.py	(revision 304)
+++ xpra/client.py	(revision 308)
@@ -165,8 +165,7 @@
             self._backing.draw_pixbuf(gc, pixbuf, 0, 0, x, y, width, height)
         else:
             assert len(img_data) == width * height * 3
-            self._backing.draw_rgb_image(gc, x, y, width, height,
-										 gtk.gdk.RGB_DITHER_NONE, img_data)
+            self._backing.draw_rgb_image(gc, x, y, width, height, gtk.gdk.RGB_DITHER_NONE, img_data)
         self.window.invalidate_rect(gtk.gdk.Rectangle(x, y, width, height), False)
 
     def do_expose_event(self, event):
@@ -350,6 +349,11 @@
         capabilities_request["desktop_size"] = [root_w, root_h]
         self.send(["hello", capabilities_request])
 
+    def _process_disconnect(self, packet):
+        log.error("server requested disconnect: %s" % str(packet))
+        gtk.main_quit()
+        return
+
     def _process_challenge(self, packet):
         if not self.password_file:
             log.error("password is required by the server")
@@ -440,6 +444,7 @@
 
     _packet_handlers = {
         "challenge": _process_challenge,
+        "disconnect": _process_disconnect,
         "hello": _process_hello,
         "new-window": _process_new_window,
         "new-override-redirect": _process_new_override_redirect,
