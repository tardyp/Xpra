### Eclipse Workspace Patch 1.0
#P xpra
Index: trunk/dev/wimpiggy/prop.py
===================================================================
--- trunk/dev/wimpiggy/prop.py	(revision 124)
+++ trunk/dev/wimpiggy/prop.py	(working copy)
@@ -9,7 +9,6 @@
 conventions, and if you need more (un)marshalling smarts, add them here."""
 
 import struct
-import array
 from cStringIO import StringIO
 import gtk.gdk
 import cairo
@@ -36,14 +35,15 @@
     def __init__(self, disp, data):
         data = _force_length(data, 18 * 4)
         (flags,
-         pad1, pad2, pad3, pad4,
+         _, _, _, _,						#pad1, pad2, pad3, pad4,
          min_width, min_height,
          max_width, max_height,
          width_inc, height_inc,
          min_aspect_num, min_aspect_denom,
          max_aspect_num, max_aspect_denom,
          base_width, base_height,
-         win_gravity) = struct.unpack("@" + "I" * 18, data)
+         _									#win_gravity
+         ) = struct.unpack("@" + "I" * 18, data)
         #print repr(data)
         #print struct.unpack("@" + "i" * 18, data)
         # We only extract the pieces we care about:
@@ -76,7 +76,7 @@
     def __init__(self, disp, data):
         data = _force_length(data, 9 * 4)
         (flags, input, initial_state,
-         icon_pixmap, icon_window, icon_x, icon_y, icon_mask,
+         _, _, _, _, _,					#icon_pixmap, icon_window, icon_x, icon_y, icon_mask
          window_group) = struct.unpack("@" + "i" * 9, data)
         # NB the last field is missing from at least some ICCCM 2.0's (typo).
         # FIXME: extract icon stuff too
@@ -215,12 +215,12 @@
         return _prop_encode_scalar(disp, type, value)
 
 def _prop_encode_scalar(disp, type, value):
-    (pytype, atom, format, serialize, deserialize, terminator) = _prop_types[type]
+    (pytype, atom, format, serialize, _, _) = _prop_types[type]
     assert isinstance(value, pytype)
     return (atom, format, serialize(disp, value))
 
 def _prop_encode_list(disp, type, value):
-    (pytype, atom, format, serialize, deserialize, terminator) = _prop_types[type]
+    (_, atom, format, _, _, terminator) = _prop_types[type]
     value = list(value)
     serialized = [_prop_encode_scalar(disp, type, v)[2] for v in value]
     # Strings in X really are null-separated, not null-terminated (ICCCM
@@ -240,13 +240,13 @@
         return _prop_decode_scalar(disp, type, data)
 
 def _prop_decode_scalar(disp, type, data):
-    (pytype, atom, format, serialize, deserialize, terminator) = _prop_types[type]
+    (pytype, _, format, _, deserialize, _) = _prop_types[type]
     value = deserialize(disp, data)
     assert value is None or isinstance(value, pytype)
     return value
 
 def _prop_decode_list(disp, type, data):
-    (pytype, atom, format, serialize, deserialize, terminator) = _prop_types[type]
+    (_, _, format, _, _, terminator) = _prop_types[type]
     if terminator:
         datums = data.split(terminator)
     else:
@@ -264,7 +264,7 @@
         scalar_type = type[0]
     else:
         scalar_type = type
-    (pytype, atom, format, serialize, deserialize, terminator) = _prop_types[scalar_type]
+    (_, atom, format, _, _, _) = _prop_types[scalar_type]
     try:
         #print atom
         data = trap.call_synced(XGetWindowProperty, target, key, atom)
