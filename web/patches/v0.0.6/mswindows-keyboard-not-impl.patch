--- parti-all-0.0.7-pre-vanilla/wimpiggy/keys.py	2009-05-04 22:16:03.490674000 +0200
+++ parti-all-0.0.7-pre/wimpiggy/keys.py	2009-05-04 21:53:56.770699185 +0200
@@ -7,13 +7,14 @@
 import gtk
 from wimpiggy.util import one_arg_signal
 from wimpiggy.error import *
-from wimpiggy.lowlevel import (get_modifier_map, grab_key, ungrab_all_keys)
-
 from wimpiggy.event import add_event_receiver, remove_event_receiver
 from wimpiggy.util import get_display_for
 from wimpiggy.log import Logger
 log = Logger()
 
+get_modifier_map = None
+grab_key = None
+ungrab_all_keys = None
 class HotkeyManager(gobject.GObject):
     __gsignals__ = {
         "hotkey": (gobject.SIGNAL_RUN_LAST | gobject.SIGNAL_DETAILED,
@@ -26,6 +27,13 @@
         gobject.GObject.__init__(self)
         self.window = window
         self.hotkeys = {}
+        if not sys.platform.startswith("win"):
+                global get_modifier_map
+                global grab_key
+                global ungrab_all_keys
+                get_modifier_map = wimpiggy.lowlevel.get_modifier_map
+                grab_key = wimpiggy.lowlevel.grab_key
+                ungrab_all_keys = wimpiggy.lowlevel.ungrab_all_keys
 
         disp = get_display_for(self.window)
         self.keymap = gtk.gdk.keymap_get_for_display(disp)
@@ -61,7 +69,8 @@
             gtk.gdk.x11_ungrab_server()
 
     def _unbind_all(self):
-        ungrab_all_keys(self.window)
+        if ungrab_all_keys:
+            ungrab_all_keys(self.window)
 
     def _bind_all(self):
         self.normalized_hotkeys = {}
@@ -71,8 +80,9 @@
             for keycode in keycodes:
                 # Claim a passive grab on all the different forms of this key
                 for nuisance_mask in self.nuisances:
-                    grab_key(self.window, keycode,
-                             modifier_mask | nuisance_mask)
+                    if grab_key:
+                        grab_key(self.window, keycode,
+                                 modifier_mask | nuisance_mask)
                 # Save off the normalized form to make it easy to lookup later
                 # when we see the key appear
                 unparsed = unparse_key(modifier_mask, keycode,
@@ -134,21 +144,22 @@
         }
 
     disp = get_display_for(display_source)
-    (max_keypermod, keycodes) = get_modifier_map(disp)
-    assert len(keycodes) == 8 * max_keypermod
-    keymap = gtk.gdk.keymap_get_for_display(disp)
-    for i in range(8):
-        for j in range(max_keypermod):
-            keycode = keycodes[i * max_keypermod + j]
-            if keycode:
-                entries = keymap.get_entries_for_keycode(keycode)
-                if entries is None:
-                    # This keycode has no entry in the keymap:
-                    continue
-                for (keyval, _, _, _) in entries:
-                    keyval_name = gtk.gdk.keyval_name(keyval)
-                    if keyval_name in meanings:
-                        modifier_map[meanings[keyval_name]] |= (1 << i)
+    if get_modifier_map:
+        (max_keypermod, keycodes) = get_modifier_map(disp)
+        assert len(keycodes) == 8 * max_keypermod
+        keymap = gtk.gdk.keymap_get_for_display(disp)
+        for i in range(8):
+            for j in range(max_keypermod):
+                keycode = keycodes[i * max_keypermod + j]
+                if keycode:
+                    entries = keymap.get_entries_for_keycode(keycode)
+                    if entries is None:
+                        # This keycode has no entry in the keymap:
+                        continue
+                    for (keyval, _, _, _) in entries:
+                        keyval_name = gtk.gdk.keyval_name(keyval)
+                        if keyval_name in meanings:
+                            modifier_map[meanings[keyval_name]] |= (1 << i)
     modifier_map["nuisance"] = (modifier_map["lock"]
                                 | modifier_map["scroll"]
                                 | modifier_map["num"])
